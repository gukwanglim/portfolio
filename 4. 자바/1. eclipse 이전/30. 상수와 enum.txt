1. 사진 1번에서 private은 상황에 따라 다르기 때문에 신경 쓸 필요 없음. 대신 final은 한 번 정한 데이터가 변하지 않음을 의미.
 static은 지금 사용하고 있는 ConstantDemo class의 변수라는 의미.

 만약, 여기에 내용을 추가했을 경우 사진 1-2번처럼 변수명이 겹치는 문제가 발생할 수 있다. 물론, 변수명 앞에 어떤 범주에 들어가는 이름인지 추가하면 문제가 없지만, 코드가 복잡해 보일 수 있다.

 이런 문제를 해결하기 위해서는 사진 2번과 같이 interface를 사용하여 각 범주에 맞는 내용끼리 묶은 후, '인터페이스명.변수명'을 사용하면 된다.

 그런데 만약 과일 apple과 기업 apple의 값을 불러왔을 때, 그 정수가 같게 된다면 문제가 발생할 가능성이 생기는 것이다.(사진 3번) 좋은 코드는 이러한 가능성조차 예측하고 회피할 수 있어야한다.

 사진 3번과 같이 같은 범주의 내용이 아니어도 그 값을 가지고 비교할 수 있게 된다면 문제가 발생하기 때문에 같은 범주의 내용이 아니면 값을 비교하지 못하게 만들 수 있다.(사진 4번)
 사진 4번을 보면 인터페이스로 묶었던 Fruit와 Company를 class로 바꾼다면 if(Fruit.APPLE == Company.APPLE) 부분에 오류가 뜨는 모습을 볼 수 있다.

 하지만 if(Fruit.APPLE == Company.APPLE)을 사용하지 않는다 하여도 switch 구문에서 오류가 뜨는 모습을 확인할 수 있다. 그 이유는 switch 구문에 제한 사항이 많기 때문이다.(지난 시간의 switch 확인)

2. 위와 같은 문제에 사용할 수 있는 것이 enum이다. 
 enum은 열거형(enumerated type)이라고 부른다. 열거형은 '서로 연관된 상수들의 집합'이라고 할 수 있다. 위의 예제에서는 Fruit와 Company가 말하자면 열거인 셈이다.

3. enum을 사용하면 각각의 멤버에(여기서는 apple, paech, banana, google, apple, oracle) 인스턴스를 만들지 않고 상수명만 사용해도 열거를 사용할 수 있게 된다.(사진 5번)
 사진 4번을 보면 switch(type) 부분에 type이 에러가 발생하는 것을 확인할 수 있는데 enum을 사용하게 된다면 이 에러가 사라지게 된다.
 대신, case Fruit.APPLE: 부분에 에러가 발생하게 되는데, enum을 사용했을때는 case APPLE;으로 작성하면 문제가 해결된다.(switch 구문은 윗줄 Fruit type = Fruit.APPLE;로 인해 Fruit을 가져오는 것을 알 수 있게 된다.)

4. enum을 사용할 경우
    - 코드가 단순해진다. 
    - 인스턴스 생성과 상속을 방지한다. 
    - 키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 나타낼 수 있다.

5. enum은 사실 클래스다. 그렇기 때문에 생성자를 가질 수 있다.(사진 6번)
 enum의 {} 안에 enum과 이름이 같은 생성자를 만든다. 이때, Call Constructor 부분이 출력되는 이유는 사진 5번의 enum이 사진 4번의 3줄짜리 코드와 같은 역할을 한다는 것을 보여주는 것이다.
 (인스턴스를 하면 생성자가 생성이 되는데, 그것을 enum에서 생성자를 호출했기 때문에 볼 수 있다.)

6. 또한, 생성자를 가졌다는 말은 필드값을 가질 수 있다는 말이 된다.
 사진 7번을 보면 전역변수 color와 지역변수 color를 받아오고 apple, paech, banana 뒤에 ()를 만들어 넣어주고 싶은 'color'를 대입한다.

 여기서 apple, paech, banana 뒤에 ()은 생성자를 호출하는 것이고, () 안의 'color'는 생성자의 메개변수 인자를 전달하는 것이다.(이 메개변수는 지역변수로 들어간다.)
 따라서 apple('red')를 작성한다면 'red'는 Fruit(String color)의 String color로 들어가고, 이것은 this.color=color;의 color, this.color는 전역변수 public String color;로 들어간다.
 결과적으로 전역변수에 들어가게 된 'red'는 apple이라는 상수에 저장되는 Fruit의 인스턴스 변수인 color의 값이 red가 된다.

 이렇게 저장된 color를 불러오기 위해서는 Fruit_4.APPLE.color와 같이 사용한다.

 즉, enum에 저장된 상수는 단순하게 상수의 역할만을 하는 것이 아니라 더 많은 기능을 추가할 수 있게 되는 것이다.

7. 변수가 생긴것과 마찬가지로 메소드도 생길 수 있다.(사진 8번)
 사진 8번에서 private String color;로 public에서 private으로 변경한 이유는 사용자가 직접 color를 변경하지 못하게 만들기 위해서이다.
 이후, String getColor(){return this.color;} 메소드를 만들어 color를 불러올 때는 Fruit_4.APPLE.color가 아닌 Fruit_5.APPLE.getColor()으로 메소드를 불러 가져올 수 있다.

8. 열거형이 class 방식과 다른 점 중 하나는 열거형에 어떠한 데이터가 있는지 몰라도 마치 배열처럼 그 안에 들어있는 데이터를 하나씩 꺼내서 처리할 수 있는 기능을 한다는 것이다.
 이때 사용하는 메소드가 values() 메소드이다.(사진 9번)

 for(Fruit_6 f : Fruit_6.values())을 보면 for 구문 중간에 콜론(':')이 있는 것을 확인할 수 있고, 이 콜론은 콜론 뒷쪽은 어떠한 데이터들의 집합이 들어가고, 콜론 앞에는 그 데이터 집합의 원소들을 하나하나 꺼내서 변수 안에 담아주는 형식이다.

 Fruit_6.values()로 호출을 하게 되면 Fruit_6가 가지고 있는 하나하나의 데이터들(apple, paech, banana) 하나씩 꺼내 f에 넣는다.(마치 배열처럼 상수를 하나씩 꺼내 사용할  수 있다.)

9. 열거형은 연관된 값들을 저장한다. 또 그 값들이 변경되지 않도록 보장한다. 뿐만 아니라 열거형 자체가 클래스이기 때문에 열거형 내부에 생성자, 필드, 메소드를 가질 수 있어서 단순히 상수가 아니라 더 많은 역할을 할 수 있다.












하지만 eclipse에서 enum을 사용했더니 the type java.lang.enum cannot be resolved. it is indirectly referenced from required .class files와 같은 오류가 발생했다.(사진 오류_1번)

4. 만약 오류가 뜨지 않는다면 잘 실행되어야한다.
 enum을 사용할 경우
    코드가 단순해진다. 인스턴스 생성과 상속을 방지한다. 키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 나타낼 수 있다.


현재는 enum에 문제가 있어서 나중에 다시 (https://www.youtube.com/watch?v=vFDsVdaZeao&list=PLuHgQVnccGMCeAy-2-llhw3nWoQKUvQck&index=141) -> 시간이 지나서 다시 실행해보니 문제가 해결됐다(사진 5번)