1. abstract란 한국어로는 추상으로 번역된다. 이에 대한 정의는 뒤에서 내리도록 하고 지금 단계에서는 abstract라는 것이 상속을 강제하는 일종의 규제라고 생각하자.

 즉, abstract 클래스나 메소드를 사용하기 위해서는 반드시 상속해서 사용하도록 강제하는 것이 abstract다. 

2. 추상 메소드란 메소드의 시그니처만이 정의된 비어있는 메소드를 의미한다.

 abstract는 반드시 상속을 받아야하는데 만약, 그렇지 않은 경우 사진 1번과 같이 에러가 발생한다.

 또한, public abstract int b();의 추상 메소드를 보면 다른 메소드를 선언하는 것과 달리 {}를 사용하지 않는다. 
 이것은 메소드에 대한 구체적인 내용이 없고 추상적인 모습만 남아있는 메소드라는 뜻이다. 그렇기 때문에 사진 2번과 같이 class B에 A를 상속하여도 여전히 에러가 뜨는 것을 확인할 수 있다.

 이런 에러를 없애기 위해서는 사진 3번과 같이 public int b() {return 1;} 를 사용하여 overriding을 진행해야한다.

 또한, 사진 4번과 같이 추상 메소드로 정의할 경우 {} 안에 구체적인 내용이 들어갈 수 없게 된다.

 위의 내용을 볼 때, 만약, 멤버 중에 하나라도 abstract을 가지고 있다는 그것을 포함한 class는 무조건 abstract으로 정의된다.
 물론, class가 abstract일 경우라도 d 메소드처럼 구체적인 로직을 가질 수 있다.

3. 추상 클래스는 상속을 강제하기 위한 것이다. 즉 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 이 메소드를 상속 받은 하위 클래스의 책임으로 위임하고 있다.
 사실 코드를 이런 식으로 작성하는 경우는 작은 규모의 프로젝트에서는 거의 없다.