1. 객체지향 프로그래밍(Object-Oriented Programming)은 좀 더 나은 프로그램을 만들기 위한 프로그래밍 패러다임으로 로직을 상태(state)와 행위(behave)로 이루어진 객체로 만드는 것이다. 
 이 객체들을 마치 레고 블럭처럼 조립해서 하나의 프로그램을 만드는 것이 객체지향 프로그래밍이라고 할 수 있다.
 다시 말해서 객체지향 프로그래밍은 객체를 만드는 것이다. 따라서 객체지향 프로그래밍의 시작은 객체란 무엇인가를 이해하는 것이라고 할 수 있다.

2. 객체지향 프로그래밍 교육은 크게 두 가지로 구분된다.

    문법 : 하나는 객체지향을 편하게 할 수 있도록 언어가 제공하는 기능을 익히는 것이다. 이러한 기능들은 if, for문처럼 문법적인 구성을 가지고 있다. 이 문법을 이해하고, 숙지해야 객체를 만들 수 있다.
     객체를 만드는 법에 대한 학습이라고 할 수 있다.

    설계 : 두번째는 좋은 객체를 만드는 법이다. 이것을 다른 말로는 설계를 잘하는 법이라고 할 수 있다. 좋은 설계는 현실을 잘 반영해야 한다. 현실은 복잡하다. 하지만 그 복잡함 전체가 필요한 것은 아니다.

3. 클래스, 인스턴스, 객체지향(사진)의 사진 1-1번을 보면 중복으로 사용되는 로직을 확인할 수 있다. 이러한 중복을 제거하는 것이 프로그래밍의 기본이며 이를 refactoring이라고 한다.
 사진 1-2번을 보면 1-1번 사진에 나오는 중복을 제거한 것을 알 수 있다. 예시의 경우에는 간단한 문법을 사용해서 그렇지 만약 복잡한 코드를 사용했다면 refactoring을 해서 얻을 수 있는 장점이 훨씬 많아진다.
 또한, 여기에 변수를 따로 대입받고, 평균을 구하는 코드를 넣으면 사진 1-3번과 같이 된다.

4. 변수로 사용되는 데이터와 연산으로 사용되는 메소드를 서로 연관되어 있는 것들 끼리 그룹으로 묶어서 사용하는 방법을 객체화라고 한다.

5. 위의 코드를 기반으로 '계산기' 객체를 만들어보면 다음과 같다.(사진 2번)

    우선, 사진 2번에서 main 메소드를 보면 Calculator c1 = new Calculator();으로 Calculator 메소드를 호출하는 것처럼 보이지만 앞에 new가 있으므로 Calculator라는 객체를 만든 것이다.
    이렇게 만든 객체를 c1이라는 변수명으로 지정하는데 이때 c1의 데이터 타입은 Calculator라는 객체를 담을 수 있는 형식이어야 한다.(이러한 것을 인스턴스(instance)라고 한다./쉽게 말해 구체적인 객체)

    이렇게 만든 c1은 코드의 윗줄에서 선언한 setOprands라는 메소드를 가지고 값을 입력받는다.

    이제 코드의 윗줄을 보면 class Calculator를 볼 수 있는데 이것이 Calculator c1 = new Calculator();의 new Calculator() 부분으로 들어가게 되는 것이다.
    여기서 class의 뜻은 지금부터 Calculator라는 객체의 설계도를 컴퓨터에게 알려주는 역할을 한다고 볼 수 있다.(또한, 객체는 변수와 메소드를 포함할 수 있다.(쉽게 말해 객체는 프로그램 안의 또 다른 프로그램이라고 할 수 있다.))

    class Calculator를 살펴보면,
        우선, left, right를 int로 선언하고, 위에서 보았던 데이터를 입력받는 setOprands라는 메소드를 선언한다.
        class 안의 setOprands 메소드에서 this.left = left; 라는 문장이 있는데, 여기서 this.의 의미는 class에서 정의한 int left를 그 상태로 가져와 setOprands(int left)로 받아온 정보를 넣어준다고 보면 된다.
        이후에 sum 메소드에서 this.left, this.right로 setOprands()로 받아온 데이터를 가지고 더하기, 혹은 평균의 계산을 진행할 수 있게 된다.

    이렇게 한다면 class를 한 번 정의하고 new라는 명령어를 사용하여 여러 번 재활용할 수 있게 된다.

