1. System.out.println(1); 지금까지는 단순히 print를 하는 것으로 알아놓고 사용하기만 했던 코드이다.
 문법적으로 봤을 때 println은 메소드가 틀림없다. 그런데 메소드 앞에 Sytem.out이 있다. System은 클래스이고 out은 그 클래스의 필드(변수)이다.
 이 필드가 메소드를 가지고 있는 것은 이 필드 역시 객체라는 것을 알 수 있다.
 그리고 System을 인스턴스화한적이 없음에도 불구하고 필드 out에 접근할 수 있는 것은 out이 static이라는 것을 암시한다.

 System은 클래스라는 사실을 쉽게 알 수 있다. 그럼 그 다음에 나오는 out은 무엇일까?
 out은 System 클래스의 멤버(필드) 중에 하나인 변수이다.
 그리고 이 out이라는 변수는 객체이기 때문에 println() 이라는 메소드를 가질 수 있게 된다.

 즉, println()은 System의 소속이 아닌 out이라는 객체가 가지고 있는 메소드이다.

 또한, out이라는 멤버를 사용할 때, System 클래스를 인스턴스화 시키지 않고 사용한다.
 즉, out이라는 필드는 System 클래스의 클래스 변수라는 것을 의미한다.

 그럼 System 클래스는 어디서 나타난 것일까?

2. 사진 1번에 나오는 두 코드는 서로 같은 코드이다.
 LibraryDemo2 class를 보면 System은 java.lang.*의 소속이라는 것을 알 수 있다. 즉, java에서는 java.lang.*를 import 하지 않아도 자동으로 import를 한다는 뜻이된다.
 (사용자의 편의를 위해서 자동으로 로딩을 하고 있는 것이다.)

3. API란 자바 시스템을 제어하기 위해서 자바에서 제공하는 명령어들을 의미한다. Java SE(JDK)를 설치하면 자바 시스템을 제어하기 위한 API를 제공한다. 
 자바 개발자들은 자바에서 제공한 API를 이용해서 자바 애플리케이션을 만들게 된다. 패키지 java.lang.*의 클래스들도 자바에서 제공하는 API 중의 하나라고 할 수 있다.

4. 자바 플랫폼 위에서 동작하는 자바 애플리케이션을 개발하는 개발자들은 자바 API를 사용하게 된다. 
 그런데 자바에서 제공하는 API는 방대하기 때문에 이것을 이용하기 위해서는 API의 목록과 사용법이 체계적으로 정리된 문서를 이용할 수 있어야 한다.

 아래 페이지는 Java의 각종 문서들을 모아둔 웹페이지다.

 http://docs.oracle.com/javase/