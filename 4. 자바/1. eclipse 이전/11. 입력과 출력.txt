1. 입력과 출력(사진)의 사진 1번을 보면 main 메소드의 () 안의 값, Strings[] args는 입력 값의 파라미터로 동작한다.
 String[] args은 매개변수다. 매개변수는 메소드가 호출될 때 전달된 입력 값을 메소드 내부로 전달하는 역할을 하는 변수다. 이 변수의 데이터형은 String[]인데, String[]은 문자열을 담고 있는 배열이다.

2. 위 1번 과정을 cmd에서 실행하기 위해 프로젝트가 있는 최상위 폴더로 이동하고(사진 2-1번) java -cp bin '실행하고자 하는 메소드가 들어있는 경로(패키지)' 를 작성하고 실행해보면 아무런 값도 입력되지 않은 상태(args의 상태 None)가 출력된다.
 다시 명령어를 작성하고 그 뒤에 데이터를 넣으면(콤마(',')를 기준으로 원소로 입력) args에 저장된 원소의 값 만큼 length가 반환된다.

3. 이번에는 위 2번 과정을 for_each 구문을 사용하여 실행해보자.(사진 3-1번)
 명령어를 입력한 후, one을 작성하면 for_each 구문에 의해 one이 출력됨을 볼 수 있고, 
 one, two를 입력한다면 for_each 구문으로 인해 one two가 출력됨을 확인할 수 있다.

 물론, 이전 login을 사용했던 것처럼 eclipse에서 출력을 확인할 수 있다.(사진 3-4번)

4. 이미 실행되고 있는 프로그램에 입력값을 주는 방법은 자바에서 기본적으로 제공하는 라이브러리 중에 scanner를 이용하면 쉽게 사용자의 입력을 잡을 수 있다.(사진 4번)
 scanner를 이용하면 eclipse에서 코드를 실행시킨 후, console창에서 데이터를 입력할 경우 코드에 맞게 동작하는 모습을 볼 수 있다.

 여기서 System.in은 사용자가 입력하는 값이라고 생각하면 편하다. 만일, 이 위치에 파일을 넣게 된다면 파일의 내용을 가져오는 것이 된다.
 또한, nextInt()의 경우는 사용자가 console에서 사용자의 입력을 대기하고 있는다. (int를 입력하지 않을 경우, 오류가 뜨게 된다.)

5. 위 4번에서 사용되는 코드는 한 번 입력을 받고나면 다시 실행을 해야지만 다른 입력을 받을 수 있다. 반면, 사진 5번과 같이 while 구문으로 돌아가면서 사용자의 입력을 받고 다시 시작시킬 수 있는 메소드인 hasNextInt()를 사용한다면
 코드를 다시 실행시키지 않고도 연달아 입력값을 받고 출력값을 반환할 수 있게 된다.(int를 입력할 경우 True를, 그렇지 않은 경우 False를 반환한다.)

6. 프로젝트 파일 안에 out.txt 파일을 만들고 안에 정수를 입력한다면 사진 6번과 같이 코드를 실행시킬 수 있다.
 여기서는 scanner(file)로 file을 읽어들이고 File file = new File("out.txt");로 불러올 파일을 선언한다. 이렇게 된다면 out.txt라는 이름을 가진 파일 안에 적힌 자료를 가지고 코드가 돌아가게 된다.
 아래 부분의 catch의 경우는 예외를 뜻하며 FileNotFoundException는 만약, file을 찾지 못했다면 에러를 출력하라는 의미가 되며, 에러의 내용은 e.printStackTrace();으로 가져오게 된다.

 즉, 프로그램에서는 사용자가 직접 적는 내용만을 입력이라 정의하는 것이 아닌, 이미 존재하는 파일을 입력값으로 받을 수 있다.

7. GUI를 이용한 입력에 대해 공부하고 싶다면 https://docs.oracle.com/javase/tutorial/displayCode.html?code=http://docs.oracle.com/javase/tutorial/uiswing/examples/components/DialogDemoProject/src/components/DialogDemo.java 을 확인하자.