1. 다형성이란 하나의 메소드나 클래스가 있을 때 이것들이 다양한 방법으로 동작하는 것을 의미한다.
 키보드의 키를 통해서 비유를 들어보겠다. 키보드의 키를 사용하는 방법은 '누른다'이다. 하지만 똑같은 동작 방법의 키라고 하더라도 ESC는 취소를 ENTER는 실행의 목적을 가지고 있다. 
 다형성이란 동일한 조작방법으로 동작시키지만 동작방법은 다른 것을 의미한다.

 오버로딩은 가장 이해하기 쉬운 다형성의 예라고 할 수 있다.
 (참고로 overloading이 다형성인지 아닌지에 대해서는 이견이 존재하는 것으로 보인다.)

 사진 1번을 보면 overloading으로 같은 메소드를 사용해도 입력값에 의해 다른 실행결과를 보여준다.

2. 클래스의 다형성도 존재한다.
 사진 2번을 보면 A obj = new B();와 같이 A class를 상속받은 B class를 인스턴스로 받아올 때, 그것의 데이터 타입을 B가 아닌 A로 하는 것을 볼 수 있다.(이런 경우에 클래스 B는 클래스 A를 데이터 형으로 삼을 수 있다.)

 하지만, 사진 3번을 보면 A_1 class를 상속받은 B_1 class에서 추가시킨 y메소드를 입력한다면 데이터 타입을 A_1 class로 받은 인스턴스는 y 메소드를 사용하지 못한다.

 반면에 사진 4번을 보면 A_2 class를 상속받은 B_2 class에서 overriding을 실행하여 x 메소드를 입력한다면 데이터 타입을 A_2 class로 받은 인스턴스는 x 메소드를 사용할 때, overloading된 메소드로 사용된다.

3. 사진 5번을 보면 하나의 부모 클래스를 상속받은 두 개의 자식 클래스가 서로 다른 형태로 overriding하여 인스턴스를 만들 때, A_3 class로 데이터 타입을 받는다면 각자 overriding 된 메소드로 작동하게 된다.
 
 결국, 다형성도 코드의 중복을 제거하기 위해 사용된다.

4. 다형성의 세계에서는 인터페이스도 중요한 수단이다. 인터페이스 수업에서는 언급하지 않은 것이 있다. 특정한 인터페이스를 구현하고 있는 클래스가 있을 때 이 클래스의 데이터 타입으로 인터페이스를 지정 할 수 있다. 

 사진 6번의 코드를 설명하자면 
    어떠한 class가(여기서는 C class) 어떤한 인터페이스를(여기서는 I) 구현하고 싶다면 class는 interface를 implements 받고 그것을 인스턴스화 시킬 때, 데이터 타입을 인터페이스(여기서 I)로 받아야한다.

 위의 설명의 자세한 예시는 사진 7번을 보면 알 수 있다.