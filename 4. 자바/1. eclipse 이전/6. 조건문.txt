1. 조건문이란 주어진 조건에 따라서 애플리케이션을 다르게 동작하도록 하는 것으로 프로그래밍의 핵심 중의 하나라고 할 수 있다.

2. 조건문은 if() {  }의 형태로 작성된다. 이때, () 안에는 True나 False만 들어올 수 있다.(조건문(사진) 사진 1번)

3. if만으로는 좀 더 복잡한 상황을 처리하는데 부족하다. 아래의 그림처럼 if-else절은 if 절의 값이 true일 때 then절이 실행되고, false일 때 else절이 실행된다.(사진 2번)

4. python의 elif처럼 java에서도 else if를 사용할 수 있다.(사진 3번)

5. if 구문은 () 안에 무조건 True, False라는 Boolean이 들어가야 하는 것이 아니라 말 그대로 Boolean을 반환할 수 있는 조건이 들어가야 한다.(사진 4-1번)
 여기서 String id = args[0];의 args[0]는 python에서의 input() 함수와 같은 입력값을 받는 역할을 한다.
 이와 같은 input이 필요한 코드를 실행시키기 위해서는 Run - Run Configurations(사진 4-2번)에서 New launch Configuration을 눌러 새로운 파일을 생성한 후, Arguments 페이지의 Program arguments 부분에 입력으로 넣고 싶은 문자열을 작성한다.
 작성이 끝나고 run 버튼을 누르면 사진 4-3번과 같이 실행 결과를 볼 수 있다.

6. 위 5번과 같이 조건문에 입력을 받을 때, 하나의 조건만 받는 것이 아니라 여러 개의 조건을 동시에 받을 수도 있다.(if문의 중첩, 사진 5-1번)
 입력으로 받을 값 중, id의 경우는 args[0]로 처음 받는 입력값을 뜻하고, password의 경우는 args[1]으로 두 번째로 받은 입력값을 뜻한다.
 if문의 중첩은 if문 안에 한 번 더 if문을 작성한 것으로 else if와는 전혀 다른 구문이 된다.(if문 안의 if문은 첫 if문의 조건을 만족하고 난 이후에 다시 한번 if문을 작성하는 것이고 else if는 첫 if문의 조건을 만족하지 못하고 다른 조건을 만족할 때 사용된다.)
 
 두 개의 입력을 받는 경우도 한 개의 입력을 받는 것과 마찬가지의 과정을 거치는 대신에 Program arguments 부분에 띄워쓰기를 기준으로 두 개의 값을 입력해주면 된다.(사진 5-2, 5-3번)


7. switch문은 if문으로 대체할 수 있는 문법이다. switch문의 형태는 switch() {   }으로 if문과 같지만, () 안에 Boolean이 들어가는 것이 아닌 어떠한 값이 들어가게 된다.(사진 6번)
 만약 switch(1) {   }으로 코드가 주어진다면 실행되는 case는 1번 값을 가지고 있는 문장이 된다. 하지만 if문과 달리 case 1이 실행된 뒤에 그 아래에 있는 나머지 case도 함께 실행이 된다.
 다만, switch(2) {   }으로 코드가 실행된다면 case 2 위에 있는 case 1은 실행되지 않고 그 아래에 있는 case 2, 3만 실행된다.

8. 만약, switch문에서 특정 case만 실행시키고 싶다면 break를 사용해서 구문을 멈춰주어야 한다.(사진 7번)

9. 이런 switch문은 if문으로 쉽게 대체가 가능하다.(사진 8번)

10. 또한, switch문에서 () 안에 case에 없는 값이 들어간다면 default를 사용하여 예외 처리를 할 수 있다.(사진 9번)

* switch 문을 사용할 때 한가지 주의 할 것은 switch의 조건으로는(switch문의 () 안에 들어가는 값) 몇가지 제한된 데이터 타입만을 사용할 수 있다. byte, short, char, int, enum, String, Character, Byte, Short, Integer