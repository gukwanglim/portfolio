1. 맴버(member)는 영어로 구성원이라는 뜻이다. 객체도 구성원이 있는데 그것을 변수와 메소드라고 한다.

2. 변수는 또 인스턴스의 소유인 변수와 클래스의 소유인 변수로 나눌 수 있는데 이전에서 봤던 (클래스, 인스턴스, 객체지향(사진)의 2번 사진을 보면 인스턴스에서 setOprands으로 받은 int가 인스턴스의 소유인 변수라고 할 수 있다.
 반면 클래스의 소유인 변수는 인스턴스의 소유인 변수와 다른 특성을 가지고 있다.

3. 결론적으로 말하자면 인스턴스 소유의 변수는 각각의 인스턴스에서 다른 값을 가지게 된다.
 그러나 클래스 소유의 변수의 경우에는 모든 인스턴스에 같은 값을 가지게 만든다.

4. 클래스, 인스턴스 멤버(사진)의 사진 1번을 보면 계산기 코드에서 원주율(pi)가 필요한 순간에 pi를 불러낼 수 있게 변수를 저장한 것이다.
 조금 더 자세하게 설명하지면 class에서 만들어진 sum과 avg를 사용할 때는 서로 다른 변수를 입력받고 사용한다. 반면, pi는 sum과 avg에서 사용되어도 무조건 같은 값을 가져오게 된다.(클래스 변수는 모든 인스턴스에서 공유된다.)

5. 클래스 소유의 변수를 만들기 위해서는 사진 1번과 같이 PI를 정의할 때, 데이터 형식 앞에 static을 작성한다.(static은 정적이라는 뜻으로 모든 인스턴스에 적용된다.)

 또한, 이런 클래스 변수를 사용하기 위해서는 객체로 선언한 변수(c1, c2)의 뒤에 .PI를 사용해야한다.(c1.PI, c2.PI)
 물론, 클래스명.PI(Calculator.PI)를 이용하여 사용할 수도 있다.
 (클래스 변수라고 하여 인스턴스를 사용할 때 데이터를 변경할 수 없는 것은 아니다. 사진 2번처럼 Calculator2.base = 10;과 같은 형식으로 클래스 변수에 다른 내용을 넣을 수 있다.)

6. 클래스 변수가 있으므로 클래스 메소드도 당연히 존재한다.
 사진 3번을 보면 이전까지와는 달리 인스턴스를 선언하지 않고 Calculator3.sum(10, 20);의 방식으로 클래스를 호출하는 것을 볼 수 있다.
 이런 식으로 클래스를 바로 불러오기 위해서는 클래스 안에서 메소드를 선언할 때, public void sum()으로 끝내는 것이 아닌 public static void sum(int left, int right)으로 static을 넣어 정의하는 것이다.
 이렇게 사용하게 된다면 굳이 인스턴스를 선언하지 않아도 괜찮아지므로 메모리를 절약할 수 있다.

7. 여기서 확인해야할 사실

    7-1. 인스턴스 메소드는 클래스 멤버에 접근 할 수 있다.

    7-2. 클래스 메소드는 인스턴스 멤버에 접근 할 수 없다.
        인스턴스 변수는 인스턴스가 만들어지면서 생성되는데, 클래스 메소드는 인스턴스가 생성되기 전에 만들어지기 때문에 클래스 메소드가 인스턴스 맴버에 접근하는 것은 존재하지 않는 인스턴스 변수에 접근하는 것과 같다.
    
    사진 4번의 코드를 분석해보자면 
        class C1에서 클래스 변수로 static_variable과 인스턴스 변수로 instance_variable을 선언한다.
        클래스 메소드 static_static은 클래스 메소드가 클래스 변수에 접근할 때 클래스 변수를 반환한다.
        클레스 메소드 static_instance는 클래스 메소드에서 인스턴스 변수에 접근할 때 인스턴스 변수를 반환한다.(이 경우는 에러를 발생한다.)

8. 인스턴스 변수와 클래스 변수는 아래와 같이 부르기도 한다.

    인스턴스 변수 -> Non-Static Field
    클래스 변수 -> Static Field

    필드(field)라는 것은 클래스 전역에서 접근 할 수 있는 변수를 의미