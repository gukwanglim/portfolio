1. 객체지향을 통해서 달성하고자 하는 목표 중에서 가장 중요한 것은 재활용성일 것이다. 상속은 객체지향의 재활용성을 극대화시킨 프로그래밍 기법이라고 할 수 있다.
 동시에 객체지향을 복잡하게 하는 주요 원인이라고도 할 수 있다.
 상속(Inheritance)이란 물려준다는 의미다. 어떤 객체가 있을 때 그 객체의 필드(변수)와 메소드를 다른 객체가 물려 받을 수 있는 기능을 상속이라고 한다. 

 기존의 객체를 그대로 유지하면서 어떤 기능을 추가하는 방법이 없을까? 이런 맥락에서 등장하는 것이 상속이다. 즉 기존의 객체를 수정하지 않으면서 새로운 객체가 기존의 객체를 기반으로 만들어지게 되는 것이다.
 이때 기존의 객체는 기능을 물려준다는 의미에서 부모 객체가 되고 새로운 객체는 기존 객체의 기능을 물려받는다는 의미에서 자식 객체가 된다. 

 부모 클래스와 자식 클래스의 관계를 상위(super) 클래스와 하위(sub) 클래스라고 표현하기도 한다. 또한 기초 클래스(base class), 유도 클래스(derived class)라고도 부른다. 

2. 이전에 만들었던 class Calculator를 그대로 가져온 상태에서(Calculator에는 더하기와 평균을 구하는 기능만 존재한다.) class SubstractionableCalculator를 선언하고 extends로 Calculator를 상속받는다.(상속(사진) 1번)
 상속을 선언한 SubstractionableCalculator 클래스에 추가시킬 동작을 삽입하면 된다.

 클래스를 상속받는 것을 그림으로 표현하자면 사진 2번으로 설명할 수 있다.

3. 이러한 상속은 하나의 부모(상위) 클래스가 여러 개의 자식(하위) 클래스를 가질 수 있다.
 또한, 상속을 받은 하위 클래스는 또 다른 하위 클래스를 가질 수 있다.(사진 3번)


4. 상속을 받게 된다면 코드의 중복을 제거할 수 있으며, 재활용성을 높일 수 있다. 
 하지만 장점이 있으면 단점도 있는 법이다. 프로그래밍의 세계에서는 이 상속의 효용을 수용하기 위해서 꽤나 많은 대가를 치러야 했다. 
그 대가를 한마디로 표현하자면 복잡도의 증가라고 이야기할 수 있을 것이다.