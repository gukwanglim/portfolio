1. 프로그램이 커지면 여러 가지 이유로 이름이 충돌하게 된다. 이를 해결하기 위해서 고안된 것이 유효범위라는 개념이다. 흔히 스코프(Scope)라고도 부른다.

2. 메소드, 클래스와 같은 개념들이 등장한 배경은 프로그램을 만드는 데 사용하는 코드의 양이 기하급수적으로 증가하면서 직면하게 되는 막장을 극복하기 위한 것이었다. 
 거대해진 코드를 효율적으로 제어하지 못한다면 웅장한 소프트웨어를 만드는 것은 점점 불가능한 일이 될 것이다. 유효범위라는 것도 그러한 맥락에서 등장한 개념이다. 
 하지만 유효범위는 메소드나 클래스처럼 특별한 문법적인 규칙을 가지고 있는 것은 아니다. 오히려 메소드나 클래스 안에 포함되어서 이러한 기능들의 부품으로서의 가치를 높여주는 역할을 한다고 할 수 있다.

3. 유효범위(사진)의 1번 사진을 보면 클래스 메소드 ScopeDemo에서 int i=0;로 선언을 하고 있고, main 메소드에서는 i를 0부터 1씩 증가하며 4까지 반환하게 되어있다.
 이것처럼 코드 안에서 같은 i를 가지고도 서로 충돌하지 않는 이유는 클래스 메소드 ScopeDemo 안의 i는 밖에 존재하는 main 메소드에 영항을 주지 않기 때문이다. 즉, 클래스 메소드 a 내부의 i를 변경해도 코드는 항상 똑같이 진행된다.
 이러한 개념을 유효범위(ScopeDemo)라고 한다.

4. 만약, 클래스 메소드 a 안에 클래스 변수 i를 선언하고 클래스 메소드 a에는 int를 제거한 후, for 구문에서도 int를 제거하면 무한 반복을 실행하게 된다.(사진 2번)
 이렇듯 class 내부에 집접적으로 속해있는 변수는 전역변수(global variable)라고 한다.(클래스 메소드 a 안에서 int i로 선언된 변수는 지역변수(local variable)라고 한다.)
 
 (두 코드의 차이점을 비교하고 싶다면 비교하고 싶은 파일을 모두 선택하고 우클릭 - Compare With - Each Other을 누르면(사진 3-1번) 두 코드의 차이점을 비교할 수 있다.(사진 3-2번))

 쉽게 말해, 사진 1번의 코드에서는 클래스 메소드 a 안에서 int i로 i를 정의하는 것이어서 메소드 밖에 영향을 주지 않지만, 사진 2번 코드에서는 클래스 메소드 a에서 i를 메소드명으로 정의하는 것이 아닌 i에 0을 할당하는 것이므로 다시 0을 반환하는 것이다.

 즉, 사진 2번 코드를 정상적으로 작동시키기 위해서는 a 메소드, 혹은 for 구문 내부, 혹은 a 메소드와 for 구문 내부에 int i를 선언해주면 된다. 

5. 사진 4번을 보면서 전역변수, 지역변수가 작동하는 원리를 더 생각해보자.

6. 같은 이름의 변수를 사용할 때는 지역변수가 전역변수보다 우선순위가 높다.

7. 만약, 지역변수와 전역변수를 한 메소드 안에서 출력하고 싶다면 this.을 사용하여 전역변수를 불러오면 된다.(사진 5번)