1. 패키지(Package)는 하나의 클래스 안에서 같은 이름의 클래스들을 사용하기 위한 방법이라고 할 수 있다.

 비유를 해보자. 서로 다른 내용의 파일 java.txt가 하나의 컴퓨터에 동시에 공존할 수는 없다. 그래서 고안된 것이 디렉토리다. 
 java.txt 파일을 각각 a와 b라는 디렉터리에 저장한다면 하나의 컴퓨터 안에 같은 이름의 파일이 공존할 수 있게 된다.
 누군가에게 'a 디렉터리에 있는 java.txt'를 이메일로 보내달라고 요청할 수 있게 되는 것이다.

 패키지도 이와 유사하다. 클래스가 많아짐에 따라서 같은 이름을 가진 클래스가 생겨날 가능성이 높아지게 되는데 이름의 충돌을 방지하기 위한 고안된 것이 패키지라고 할 수 있다.

 정보 공학에서는 '이름의 충돌'이라는 문제를 해결하기 위해서 다양한 노력을 하고 있다. 전역변수와 지역변수, 객체도 그런 연장선에 있다고 볼 수 있다.

2. 패키지의 특성상 같은 패키지 안의 다른 java 파일의 class를 또 다른 java 파일에서 인스턴스로 사용할 수 있다.(사진 1번)
 하지만 다른 패키지 안에서는 인스턴스로 사용할 수 없다.(사진 2번)
 이와 같은 경우에는 사진 3번과 같이 import를 사용하여 불러들일 수 있다.

3. 패키지를 eclipse 사용하지 않고 컴파일 해보자.
 
  우선, 패키지 경로에 Selfcompile.java 파일을 메모장으로 작성한다.(사진 4번)

  다음으로 cmd창에 javac src/org/opentutorials/javatutorials/packages/example3/*.java를 실행한다.
  그러면 Selfcompile.java이 있는 위치에 .class 파일이 생긴것을 볼 수 있다.(사진 6번)

  하지만 이렇게만 한다면 bin 파일에는 .class 파일이 생성되지 않는다. 그렇기 때문에 사진 7번처럼 javac src/org/opentutorials/javatutorials/packages/example3/*.java -d bin을 실행한다.

4. 이렇듯 다른 패키지를 import하여 class를 불러올 수 있지만, 만약, 두 패키지를 import 했는데 양 쪽에 같은 이름의 class가 존재한다면 그것을 사용할 때 에러가 생기니 조심해야한다.
 물론, 이런 경우에도 인스턴스를 만들 때, 불러올 패키지를 모두 긁어와 사용하면 되지만
 (org.opentutorials.javatutorials.packages.example1.B b = org.opentutorials.javatutorials.packages.example1.B()와 같은 방식) 그냥 class명을 바꾸는 것이 더 편하다.

 