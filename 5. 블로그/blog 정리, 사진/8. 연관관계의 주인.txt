1. 연관관계의 주인은 FK를 가지고 있는 오브젝트를 말한다.
    blog 프로젝트를 이용하여 설명하자면 메인 페이지에는 여러 게시글이 올라오게되고 그 게시글을 클릭하면 상세 페이지로 넘어가게 된다.
    상세 페이지에는 작성자(User table), 제목 및 내용(Board table), 댓글(Reply table)이 존재하고 이 내용들은 데이터 베이스에서 가져오게 된다.
    그런데 Board table에서는 User table을 FK로 사용하기 때문에 세 개의 table을 모두 들고오지 않고 Board table만들 selete 하면 된다.

    그렇다면 따로 떨어져 있는 Reply table은 어떻게 가져와야 할까?
    Board table을 selete 하는 것을 연관되어 있지 않는 다른 table을 가져오는 방법은 사진 1번과 같이 코드로 작성해주는 방법이 있다.
        하나의 게시글에서는 여러 개의 댓글이 달릴 수 있으므로 List로 받아야 한다.(@OneToMany) -> import java.util.List;를 이용한다.
        여기서 @OneToMany(mappedBy = "board")의 mappedBy는 연관관계의 주인이 아니라는 뜻이다.(FK가 아니다) -> DB에 컬럼을 만들지 않는다.
        또한, @OneToMany(mappedBy = "board")의 board는 Reply table에서 @JoinColumn(name = "boardId")로 사용하고 있는 borad를 의미한다.(사진 3번) -> Reply에서 Board를 불러온다.

        이러한 내용을 조금 더 설명하자면 
            @ManyToOne의 경우에는 디폴트값이 @ManyToOne(fetch = FetchType.EAGER)으로 들어간다.(가져올 내용이 정해져있음)
            @@OneToMany의 경우에는 디폴트값이 (fetch = FetchType.LAZY)으로 들어간다.(여러 내용을 가져올 수 있지만, 그 중에서 필요한 내용만을 가져온다.)

            만약, 상세 페이지에 들어갔을 때, 보이는 UI가 작성자, 제목, 내용, 댓글 이라면 EAGER를 사용하면 된다.
            반면에, 상세 페이지에 들어갔을 때, 보이는 UI가 작성자, 제목, 내용이고, 펼치기 버튼을 이용하여 댓글을 보게 만든다면 LAZY를 사용하면 된다.
            (현재 프로젝트는 한 눈에 볼 수 있도록 Reply를 EAGER으로 변경한다.)

    이렇게하면 Board table을 selete 할 때, JPA에서 코드를 읽고 DB에서 join(Board, User, Reply table)하여 가져온다.

    여기서는 @JoinColumn(name = replyId)가 필요없다.
    그 이유는 Board table은 Reply table을 FK로 받을 필요가 없기 때문이다.
        쉽게 말해 @JoinColumn(name = replyId)가 사용된다면 Board table에 reply라는 피드가 추가된다는 말인데 하나의 게시글에는 수십, 수백 개의 댓글이 달릴 수 있기 때문에 
        0번째 게시글 피드에 여러 개의 댓글 정보가 들어갈 수 없게 된다.(원자성(데이터 베이스의 하나의 column은 하나의 데이터를 가져야만 한다.))
    (오로지 Borad table을 불러올 때, Reply table을 join하는 용도)    