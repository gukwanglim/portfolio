1. 사진 1번과 같이 form 의 action에 "/auth/loginProc"를 넣어주게 되면 
    작성되는 username, password를 가지고 "/auth/loginProc" 주소로 이동하게 된다.

    그런데 여기서 중요한 것은 현재 프로젝트에서는 /auth/joinProc는 만들었지만 /auth/loginProc는 만들지 않았다.
    그럼에도 /auth/loginProc를 사용하는 이유는 시큐리티가 가로채게 만들기 위해서이다.

    그 방법은 사진 2번과 같이 SecurityConfig.java에서 .loginProcessingUrl("주소")을 이용하여 스프링 시큐리티가 해당 주소로 요청오는 login을 가로채서 대신 로그인을 하게 된다.
    또한, .defaultSuccessUrl("/");을 이용하여 스프링 시큐리티가 login을 끝내고 해당 주소로 이동하게 만들어준다.

    이곳의 전체 코드의 동작에 대해 설명하자면 
        - 인증이 되지 않는 어떠한 요청은 전부 .loginPage("/auth/loginForm")로 인해 /auth/loginForm으로 이동한다.
            (여기서 인증이 필요한 요청 = .antMatchers("/", "/auth/**", "/js/**", "/css/**", "/image/**") 부분)
        - 로그인을 수행하게 되면 .loginProcessingUrl("/auth/loginProc")으로 인해 /auth/loginProc으로 오는 요청을 스프링 시큐리티가 가로채서 대신 로그인한다.
        - 마지막으로 로그인이 완료되면 .defaultSuccessUrl("/");을 통해 / 페이지로 이동한다.
        - 추가로 .failureUrl("/fail");를 사용하게 되면 로그인이 실패했을 경우 /fail으로 이동한다.

2. 이렇게 로그인을 할 때, 사용자가 요청한 username, password를 가로챌때 만들어야할 class가 있다.(UserDetails를 가지고 있는(UserDetails type의) User 오브젝트)
    User 오브젝트를 만들기 위해 com.cos.blog.config 아래에 auth 패키지와 PrincipalDetailsService 클래스를 만든다.(사진 3번)

    public class PrincipalDetail 안에 private User user;를 사용하는 것처럼 class가 객체를 품고 있는 것을 컴포지션이라고 한다.(상속은 extends 사용)

    여기서 public class PrincipalDetail에 implements UserDetails를 사용하는데 UserDetails 안에는 getUsername(), getPassword() 등의 초성 메소드를 가지고 있어 이것들을 overriding 해야한다.
    그러기 위해서는 alt+shift+s를 이용하여 Overriding/Implements Methods(사진 4번)을 선택하여 모든 항목이 체크되어 있는 상태(사진 5번)에서 ok를 누르면 사진 6번과 같이 작성되는 것을 확인할 수 있다.

    overriding(사진 7, 8번)
        - 제일 위에 존재했던 getAuthorities() 부분을 제일 아래로 내림.
        - 스프링 시큐리티가 로그인 요청을 가로채서 로그인을 진행하고 완료가 되면 UserDetails 타입의 오브젝트를 스프링 시큐리티의 고유한 세션 저장소에 저장 해준다.
            (이때 저장되는 것이 UserDetails 타입의 PrincipalDetail이다. 따라서 PrincipalDetail가 저장이 될 때, DB에 저장된 User 오브젝트가 포함되어있어야 한다.)
        - isAccountNonExpired()의 경우는 계정이 만료되지 않았는지를 return 한다.(true: 만료X)
        - isAccountNonLocked()의 경우는 계정의 잠김 상태를 return 한다.(true: 잠기지 않음)
        - isCredentialsNonExpired()의 경우는 비밀번호의 만료 상태를 return 한다.(true: 만료X) -> false일 경우 만료된 상태로 로그인이 불가
        - isEnabled()의 경우는 계정이 활성화(사용가능)인지 return 한다.(true: 활성화)
        - getAuthorities()의 경우는 계정이 가지고 있는 권한 목록을 return 한다.(권한이 여러 개 있을 수 있어서 루프를 돌아야하는데 우리는 한 개만)
            (자세한 내용은 사진 8번을 참조. 사진 8번에서 GrantedAuthority()에 대한 참고 자료는 사진 9번을 참조)

3. 시큐리티가 대신 로그인 해주는데 password를 가로채기 때문에 해당 password가 뭘로 해쉬가 되어 회원가입이 되었는지 알아야 같은 해쉬로 암호화해서 DB에 있는 해쉬랑 비교할 수 있음.

    이것을 위해서 SecurityConfig.java에 configure(AuthenticationManagerBuilder auth)를 만들어 줘야하는데 spring 2.7 부터는 이것을 사용하지 않음.

    그렇기 때문에 코드의 변경이 필요하다.(사진 15번)
        사진 15번에서와 같이 코드를 변경해보면 중간중간 오류가 발생하는 부분이 있다.
        이것은 새로운 java 파일을 만들어 메소드를 선언해줘야하는 부분으로 CorsConfig의 경우는 SecurityConfig.java와 같은 위치에 CorsConfig.java 파일을 만들어(사진 16번) 사진 17번과 같이 코드를 작성.
            (여기서 SecurityConfig_1.java가 존재하는 이유는 기존 코드와 새롭게 고친 코드가 상이한 부분이 많아 기존 코드를 주석처리하여 SecurityConfig_1.java로 남겨둔 것이다.)
        
        ** 그 외에 JwtAuthenticationFilter, JwtAuthorizationFilter 등의 내용들이 새로운 패키지와 클래스를 만들어 사용해야하지만 차후 블로그 과정에서 나올것으로 일단 넘어가기로 한다.
            (일단 코드 사진을 올리자면 사진 18번과 같이 config 패키지 안에 jwt 패키지를 만들고 그 안에 JwtAuthenticationFilter, JwtAuthorizationFilter 클래스를 만든다.
                JwtAuthenticationFilter.java의 코드는 사진 19, 20번이며 JwtAuthorizationFilter.java의 코드는 사진 21번이다.)
    

4. 사진 10번과 같이 auth 패키지에 PrincipalDetailsService 클래스를 생성.
    public class PrincipalDetailsService는 UserDetailsService 타입이 되어야 한다.(사진 13번)
        이렇게 UserDetailsService 타입이 된 PrincipalDetailsService가 메모리에 뜨기 위해서는 @Service 어노테이션이 있어야한다.(Bean에 등록)4
        이것은 @Override가 되어야하고 이렇게 어노테이션이 되면 스프링이 로그인 요청을 가로챌 때, username, password 변수 2개를 가로채는데 password 부분 처리는 알아서 하게 된다.
            때문에 username이 DB에 존재하는지만 확인해주면 된다.
            (이 확인은 loadUserByUsername() 함수에서 진행)


    이제 @Autowired를 사용하여 private UserRepositroy userRepositroy;를 선언하고 userRepositroy.findByUsername()를 실행해야 하는데 findByUsername()을 선언하지 않았음으로
        UserRepositroy.java에서 findByUsername()를 선언한다.(사진 11번)
        
        Optional<User> findByUsername(String username);은 SELECT * FROM user WHERE username=1?;과 같은 뜻을 가지며,
            이렇게 java 형식으로 쿼리문을 사용하기 위해서는 findBy~를 규칙으로 하며 SELECT * FROM user WHERE username=1?;에서 username 부분이 findBy 뒤에 들어가는데 앞 글자는 대문자로 사용해야한다.

    다시 PrincipalDetailsService.java로 돌아와 findByUsername을 사용하는데 마지막 return 값으로 받아오는 것은 principal이 아니라 타입이 UserDetails이므로 앞서 만들었던 PrincipalDetail(이곳의 2번에서 만들었음)을 사용.
        그리고 PrincipalDetail class는 현재 null이므로 PrincipalDetail.java에 들어가 public PrincipalDetail(User user)으로 this.user = user;를 넣는다.(사진 12번)
        PrincipalDetail의 값이 null이 아니므로 다시 PrincipalDetailsService.java로 돌아와 return 값에 new PrincipalDetail(principal);를 사용한다.

    코드의 전체적인 흐름을 설명하자면 
        - 로그인이 진행될 때, loadUserByUsername() 함수가 자동으로 실행되면서 findByUsername(username)에서 해당 username을 찾아 principal에 넣는다.
        - 만약, 해당 유저를 찾을 수 없다면 UsernameNotFoundException()으로 인해 해당 유저를 찾을 수 없다는 문구를 반환.
            (username과 달리 password를 틀렸다면 스프링 시큐리티에서 알아서 처리)
        - username이 존재한다면 principal에 담겨서 PrincipalDetail(principal)으로 return.(시큐리티 세션에 유저 정보가 저장)
            (이때, PrincipalDetail()의 타입은 UserDetails 여야 한다.)

    만약, @Override를 사용하여 이런 형식으로 만들지 않는다면 PrincipalDetail.java의 public PrincipalDetail(User user) {this.user = user}에 담을 수 없다.

5. 스프링 시큐리티에서는 /logout이 로그아웃 될 수 있도록 디폴트 값으로 들어가 있다.

6. 로그인에 성공한 경우, BoardController.java에서 public String index(@AuthenticationPrincipal PrincipalDetail principal)과 같이 @AuthenticationPrincipal PrincipalDetail principal을 이용하여 id를 받아올 수 있다.
    (사진 14번)