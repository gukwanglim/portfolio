1. blog에 회원가입을 할 때, naver나 kakao를 통해 회원가입을 하게 되면 인증 처리에 대한 수고를 덜 수 있다.
    물론, 이런 방식의 회원가입은 naver나 kakao의 정보만을 통해서 주소 정보나, 포인트 등의 정보들은 따로 관리가 필요해진다.(이 모든 것들을 연동하는 서비스를 만들 필요가 있다.)
    즉, naver, kakao로 회원가입하는 것은 간단한 인증 처리를 해주는 것이다.

2. OAuth(Open Auth) : 인증 처리를 대신주는 것.

    일방적인 로그인 구성
        - 클라이언트(사용자)가 로그인을 요청하고 서버(blog 등)가 로그인에 대한 응답을 해준다.

    OAuth 로그인 구성
        - 리소스 오너(사용자)가 클라이언트(blog)에 로그인 요청을 하게 되면 서버는 카카오(혹은 네이버) API 서버에 카카오(네이버) 로그인 요청을 하게 된다.
        - 서버는 리소스 오너에게 로그인 페이지를 응답한다. 

        - 만약, 리소스 오너가 id, password 아래에 존재하는 카카오 로그인이 존재하여 그것을 선택하면 리소스 오너는 서버가 아닌 카카오 API 서버(인증 서버)에 카카오 로그인 요청을 하게 된다.
        - 카카오 API 서버는 리소스 오너에게 
            - 로그인이 안 되어 있을 경우에는 로그인 페이지를
            - 로그인이 되어 있을 경우에는 카카오 동의창을 응답한다.
        - 리소스 오너가 동의를 하게 되면 카카오 API 서버는 blog 서버에 callback을 응답한다.
            - 이때 카카오 API 서버는 blog 서버에 임의의 code를 넘겨준다.(여기까지가 인증처리)
        - code 값을 받게 된 blog 서버는 카카오 API 서버에게 code 값을 날리면서 자원 서버(리소스 서버)에 있는 데이터를 사용할 수 있는 권한을 요청한다.
            (자원 서버는 카카오 API 서버에 연동되어 있는 데이터 베이스라고 생각하면 편하다.)
        - 권한 요청을 받은 카카오 API 서버는 blog 서버에 Access Token을 넘겨준다.
            - 이 토큰을 받는 순간 권한을 부여 받은 것이 된다.(user의 정보에 접근할 수 있는 권한)
            - 이렇게 Access Token을 가지게 된 blog는 리소스 오너 대신에 카카오의 리소스 오너 정보에 접근할 수 있는 열쇠가 되는 것이다.

        즉, code를 받았다는 말은 인증처리가 완료되었다는 말이고, Access Token을 받았다는 말은 user의 정보에 접근할 수 있는 권한을 위임받았다는 말이다.

3. spring에서 공식적으로 주체해주는 OAuth 서버는 Facebook과 google이다.
    (OAuth-Client 라이브러리를 통해 Facebook과 google의 인증과 권한 처리를 쉽게 만들어준다.)

    이런 OAuth-Client는 spring을 처음 시작할 때, 선정할 수 있다.(사진 1번)
        현재의 프로젝트는 이 기능을 사용하지 않고 직접 사용.
        (처음에 체크를 하지 않아도 pom.xml에 작성하여 등록 가능)