1. com.cos.blog 아래 service 패키지와 UserService 클래스 생성(사진 1번)
    @Service의 경우 spring이 컴포넌트 스캔을 통해서 Bean에 등록을 해준다.(IoC를 해준다.)

    사진 2번
    서비스가 필요한 이유
        1-1. 트랜잭션을 관리하기 위해서(뒤에서 자세히 설명)
        1-2. 서비스라는 의미 때문에 
            간단한 예시를 들어 설명하자면
                5만원을 가지고 있는 A가 2만원을 가지고 있는 B에게 3만원을 송금할 경우,
                A는 5만원에서 3만원을 뺀 금액만큼 update()를 해야한다.(update를 한다는 것은 commit이 되야한다는 뜻이다.) 
                B는 2만원에서 3만원을 더한 금액만큼 update()를 해야한다.

                이와 같이 두 개 이상의 로직이 묶인 상태로 하나의 서비스가 이뤄지는 경우가 존재한다.(이때 하나의 로직을 트랜잭션이라고 부른다.)
                즉, 둘 이상의 로직 중에 하나라도 오류가 발생한다면 다시 rollback을 해야하는 것이다.

                현재 작성되어 있는 코드에서 보자면 try 구문의 userRepositroy.save(user); 부분이 여러 개로 늘어날 수 있다는 말이다.(때문에 @Transactional 사용)
                    만약, 여러 개의 트랜잭션이 존재한다면
                        모든 트랜잭션에 문제가 없을 때는 commit을 진행하고, 
                        문제가 발생한다면 rollback을 진행하는데 rollback에 대한 코드를 작성해줘야 한다.(현재 프로젝트에서는 하나의 트랜젝션만 가지고 있기에 간단하게 넘어감)

    이렇게 만든 service는 UserService.java에서 private UserService userService;로 불러 사용하면 되며 받아온 user를 그대로 int result = userService.회원가입(user);에 사용하여
    return에 result로 넣는다.(UserService.java에서 문제가 없으면 1을, 오류가 발생하면 -1을 return하도록 되어 있음)(사진 3번)

    추가로 현재 user에 담긴 내용은 총 3개(username, password, email)로 자동으로 기입되는 id, cerateDate와 달리 role은 자동생성되지 않으므로 직접 넣어준다.

    이제 기존 데이터 베이스에 저장된 데이터(사진 4번)을 확인하고 회원가입 진행 후 데이터를 확인해보면 사진 5번과 같이 추가되어 있음을 확인할 수 있다.

2. DB의 격리수준
    트랜젝션 : 일이 처리되기 위한 가장 작은 단위

    2-1. 오라클의 경우에는 read commit 이라는 트랜젝션을 사용한다.
        read commit
            - A가 트랜젝션을 시작
                EMP table에 empno, name 이 들어있고 (10, 홍길동), (11, 임꺽정)이라는 데이터가 담겨있다.
            - 시작이 지나 update 문을 만남
                (10, 홍길동), (11, 장보고)로 내용이 변경
            - 이때 B가 empno = 11을 select하게 된다면
                B가 찾게된 name은 장보고가 아니라 임꺽정이 된다.

            그 이유는 오라클의 경우 commit 된 내용만을 read하게 된다. 때문에 위의 예시에서는 update만 진행되었고, commit은 이뤄지지 않았기 때문에 임꺽정을 찾게 되는 것이다.
            즉, commit이 진행된 이후에 empno =11을 select 한다면 장보고를 찾게 되는 것이다.

        조금 더 넓게 본다면 데이터 베이스에서 데이터를 변경하는 쿼리문(insert, update 등등)이 날아오면 기본적으로 undo라는 영역에 데이터를 들고 있다.
        이 상태에서 select를 실행하게 된다면 undo 영역에 있는 데이터를 가져오게 된다.
        이 undo 영역은 commit이 진행되어야 새로운 내용을 가져오게 된다.

        read commit의 문제점
            - 위 예시에서 A가 트랜젝션을 시작한 타이밍에 B도 트랜젝션을 시작
            - select를 이용하여 얻은 결과를 가지고 마지막에 insert를 통해 연산을 하여 commit을 한다고 가정
            - 이런 경우에는 언제 select를 이용해 가져온 데이터의 내용이 달라질지 모르게 된다.(PHANTOM READ(데이터가 보였다 안보였다) -> 정합성이 깨진다.) 

            이러한 문제를 해결하기 위해서는 repeatable read를 사용해야한다.  

    2-2. mysql, mariadb의 경우에는 repeatable read이라는 트랜젝션을 사용한다.
        repeatable read
            - 부정합이 발생하지 않는다.
                (같은 내용으로 select를 했을 경우, 한 번이라도 다른 결과물이 나오지 않는다.)
            - 위의 예시와 같이 EMP table에 empno, name 이 들어있고 (10, 홍길동), (11, 임꺽정)이라는 데이터가 담겨있다.
                이때 T11(트랜젝션 11번)이 실행되고 select를 했을 때, 임꺽정이 출력
            - 이 타이밍에 T12가 실행되어 update를 진행.
                (11, 장보고)로 내용이 변경. 아직 commit이 되지 않았기에 T11에서는 select로 임꺽정이 출력
            - T12에서 commit을 실행하여 undo에 내용이 (11, 장보고)로 변경.
                아직 T11은 트랙젝션이 실행되고 종료하지 않았기 때문에 select를 하여도 임꺽정이 출력.

            즉, T11이 T12보다 먼저 실행, select가 실행되면 자신이 가지고 있는 트랜젝션 번호보다 낮은 undo 로그를 보고 select를 실행.
            따라서 트랜젝션을 실행하지 않고 select를 실행한다면 read commit 방식과 같이 중간에 commit이 되면 그 데이터를 찾게 된다.

    spring에서 crud(insert, select, update, delete)를 실행할 때, insert, update, delete에만 @Transactional를 사용하지만, 정확성을 위해 select에서도 @Transactional을 사용(정합성 유지를 위해)

3. 스프링부트의 트랜잭션(사진 6번)
    - 세션의 시작은 서블릿이 시작되는 시점 부터~ (세션은 영속성 컨텍스트를 포함)
    - 트랜잭션의 시작은 서비스 레이어부터, JDBC 커넥션도 이 시점부터.
    - 트랜잭션의 종료는 서비스 계층에서 종료, JDBC 커넥션도 이 시점 부터 종료.
    - 세션은 컨트롤러 영역까지 끌고 가기 때문에 영속성이 보장되어 select가 가능해지고 lazy-loading이 가능해진다.

    spring 시작
        - 톰켓 시작(서버 작동)
        - 서버가 작동하기 위해서 web.xml 읽기
        - context.xml을 읽어 DB 연결 테스트
            1. request(예를 들어 홍길동이 장보고에게 1만원을 송금하는 요청)
                계좌 table에는 번호, 이름, 계좌번호, 금액이 존재하며 (1, 홍길동, 1111, 1만원), (2, 임꺽정, 2222, 2만원), (3, 장보고, 3333, 5만원)의 데이터가 존재.
                1-1. JDBC 커넥션 연결(데이터 베이스에 insert, select 등 쿼리문을 사용 가능)(사용자마다 생성)
                1-2. 트랜젝션 생성(사용자마다 생성)
                1-3. 영속성 컨텍스트 생성(사용자마다 생성)
            2. web.xml
                2-1. 데이터 베이스 연결 세션 생성
                2-2. 트랜젝션 시작
            3. 필터
            4. spirng container
                4-1. 요청을 분기할 수 있는 controller.
                4-2. 요청 분기를 통해 service를 호출(예시에서 service는 송금)
                    송금 service를 위해서 홍길동과 장보고의 계좌 정보에 접근하여 update를 해야한다.
            5. 송금 service 로직에서 홍길동과 장보고의 계좌 정보를 select하면 계좌 table에서 그 정보를 영속성 컨텍스트에 전달.(repositroy에서 select)
            6. service에서 홍길동과 장보고의 계좌 정보를 객체로 가지고 값을 변동 (1, 홍길동, 1111, 0원), (3, 장보고, 3333, 6만원)
                실제 DB의 값이 변경된 것이 아니라 영속성 컨텍스트에 가지고 있는 객체 두 개의 값이 변경
            7. 다시 요청 분기(controller)로 돌아옴.
                @RestController의 경우에는 Data(json)을 respone.
                @Controller의 경우에는 html을 respone.
                (JDBC 커넥션 종료)
            8. 이 상태로 끝난다면 DB에 변경이 없지만 controller에서 트랜젝션이 종료(commit 실행)가 된다.
            9. 트랜젝션이 종료되면 자동으로 영속성 컨텍스트의 변경 감지를 통해 flush를 이용해 DB에 데이터를 수정.
            10. DB 연결 세션 종료.

    이런 방식에도 문제점은 존재한다.
        위 7번 부분에서 JDBC 커넥션이 종료된다고 했는데 이것은 service에서 controller로 넘겨주는 부분에서 종료가 되어도 상관없다.(이 과정에서 트랜젝션, 영속성 컨텍스트 종료)
            -> 데이터 베이스 커넥션의 시점이 줄어들고 영속성 컨텍스트가 빨리 종료되기 때문에 데이터 베이스에 대한 부하가 줄어든다.

        또한, 처음 요청을 받을 때, JDBC 커넥션과 트랜젝션이 생성될 필요 없이 영속성 컨텍스트만 생성되고 controller에서 service로 넘어가는 과정에서 JDBC 커넥션, 트랜젝션이 시작
            -> 이것도 데이터 베이스의 부하가 줄어들게 된다.

        여기서 발생할 수 있는 문제점은 @OneToMany(mappedBy = "board", fetch = FetchType.EAGER)와 같이 EAGER이 아닌 LAZY일 경우에 발생한다.
            만약, 위의 예시와 달리 두 개의 테이블이 존재하고 FK로 연결되어 있다면(예를 들어 선수와 팀 테이블) EAGER의 경우 선수의 데이터를 가져오게 되면 FK로 연결되어 있는 팀 테이블도 같이 가져온다.
            하지만 LAZY의 경우에는 선수 테이블을 호출할 경우, 팀 테이블은 가져오지 않는다.

            이런 상황에서 데이터 베이스의 부하를 줄이기 위한 조치를 취한다면 LAZY의 경우, 영속성 컨텍스트가 종료되기 때문에 팀에 대한 데이터를 가져올 수 없게 된다.
                사실 LAZY는 선수의 정보를 불러올 때, FK로 연결된 팀의 정보를 프록시 객체로 만들어서 가져오게 된다.(물론, 영속성 컨텍스트가 종료되면 데이터는 가져올 수 없다.)

                때문에 영속성 컨텍스트는 controller에서 응답으로 보낼 때 종료 하면(controller에서는 다른 명령어는 수행하지 못하고 select만 가능하다)
                    선수 데이터와 함께 가지고 있는 프록시 데이터는 영속성 컨텍스트에 존재하는 프록시 객체를 호출할 수 있게 된다.
                    이때는 선수가 포함된 팀 정보의 프록시 객체는 JDBC 커넥트를 시작시키고 실제 팀 정보로 변경된다.(그 후, JDBC 커넥션 종료)

                    이 과정을 거지면 controller에는 선수 정보 객체와 팀 정보 객체가 담기게 된다.
        
        이러한 LAZY 로딩은 spring 2.0부터는 디폴트값으로 되어있다.(JDBC 커넥트, 트랜젝션의 종료와 영속성 컨텍스트의 종료가 따로 작동하는 과정)
        만약, yml 파일에서 jpa의 open-in-view를 false로 바꾼다면 JDBC 커넥트, 트랜젝션이 종료되는 순간에 영속성 컨텍스트도 함께 종료된다.