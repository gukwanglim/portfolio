- 예시는 로그인 요청

1. 톰켓 시작
    - request 요청 : http://localhost:8000/login (Post), Body : username, password 

2. 필터 동작(권한, 인증, 한글 인코딩 등등)
    - 필터를 통해 필터링 진행

3. 디스패처 동작(사용자들이 주소를 요청 시, 디스패처가 주소를 확인해서 controller에게 요청)
    - /login 이라는 주소를 가진 것을 메모리 띄움.

4. 사용자가 요청할 때마다 메모리 생성(요청이 들어올 때마다 스레드가 생성)
    4-1. 메모리에 controller 생성(JDBC 연결(데이터 베시스에 세션을 연결))
        - 디스패터로부터 username, password를 받아 service에게 넘김.

    4-2. 메모리에 service 생성(@Transactional이 실행)
        - login을 요청하에 login 시작.
        - login 요청은 select 요청이므로 JPA repository에게 요청을 위임.

    4-3. 메모리에 JPA repository 생성
        - username, password가 있는 데이터 베이스를 select
        - SELECT * FROM user WHERE username=? AND password=?;
        - 해당 요청에 부합하는 데이터가 있는지 영속성 컨텍스트에서 찾음.(user 오브젝트가 영속성 컨텍스트에 존재하는지 확인)

    4-4. 메모리에 영속성 컨텍스트 생성
        - user 오브젝트가 존재하지 않을 경우 Datasource에 요청.

    대신 이 과정은 생성만 된 후, 메모리에 뜨지는 않는다.
    (요청(request)이 들어와야지만 작동)

5. Datasource 생성.
    5-1. 4번과 달리 Datasource는 톰켓 시작 시, 메모리에 뜬다.
        - 영속성 컨텍스트에서 요청 받은 데이터가 DB에 있는지 요청.

    5-2. Datasource는 DB와 직접적인 연결이 되어있음.
        - DB는 user 오브젝트를 Datasource에게 return(응답해준다.)

6. 메모리에 ViewResolver 뜸.

7. 메모리에 인터셉터가 뜸.(프로젝트에서 SecurityConfig의 과정(다만, 시큐리티는 필터와 인터셉트의 역할을 모두 수행))

8. user 오브젝트를 받은 Datasource는 해당 오브젝트를 영속성 컨텍스트에 user 오브젝트 생성.

9. 영속성 컨텍스트는 받아온 user 오브젝트를 JPA repository에게 응답.

10. JPA repository는 service에게 user 오브젝트를 응답.

10. service는 user 오브젝트가 null인지 아닌지 판단하여 null이 아닐 경우 세션에 등록.
    이때 controller에 응답하여 사용자가 로그인 할 수 있도록 도와줌.

11. 만약, controller가
    11-1. @Controller 라면 html 페이지를 만들어서 사용자에게 응답.
        - / 페이지로 이동하라는 응답이 들어오면 html 페이지를 응답하는 controller이므로 ViewResolver가 작동.
            - ViewResolver는 페이지를 만들어서 응답.
            - 즉, controller에서 마지막에 return 되는 값이 "home";과 같이 되어 home.jsp를 찾아서 html로 만들어서 사용자에게 응답.

    11-2. @RestController 라면 데이터만 반환.(ViewResolver가 작동하지 않음.)
        - return "home";으로 끝날 경우 home이라는 메시지 자체를 응답.

12. 인터셉트의 경우는
    - 1번 유저의 개인 정보를 보는 요청(/user/1)을 가진 함수가 실행되면 1번 유저의 정보를 가지고 사용자에게 응답.
    - 이런 경우 모든 유저에게 1번 유저의 정보가 노출될 수 있으므로 요청이 실행되기 직전에 지금 들어온 사용자가 세션에 있는지 확인해서 세션에 존재하는 유저가 1번 유저일 경우 정보를 제공.
        
    인터셉트는 필터와는 다른 개념.
        - 필터 : 요청이 들어올 때, 걸러내는 역할
        - 인터셉트 : 함수가 실행되기 직전에 사용자에게 권한이 있는지를 확인하고 권한이 있으면 데이터를 응답.


- 한 번 더 회원가입을 실행했다는 예시

1. 톰켓, 필터, 디스패처

2. Body로 받은 username, password, email 등의 정보를 controller에서 service로 요청.(JDBC 연결(데이터 베시스에 세션을 연결))

3. service에 요청이 들어오는 순간 @Transactional이 실행되며 JPA repository에 insert 요청.

4. JPA repository는 영속성 컨텍스트에 insert를 요청.

5. 영속성 컨텍스트는 DB에 insert 요청.

6. DB에 user 정보가 insert 후, 영속성 컨텍스트에 응답.

7. 영속성 컨텍스트는 JPA repository에 응답.

8. JPA repository는 service에 응답.

9. service는 정상적으로 insert가 실행되었을 경우 controller에게 응답.
    service가 끝나는 순간 @Transactional이 종료.
        - @Transactional이이 종료되는 순간 DB에 insert만 되어있던 데이터가 commit을 진행.

10. controller는 회원가입이 성공했을 경우 main 페이지를 띄워주거나 회원가입 성공 알람을 보냄.
    - 로그인 페이지로 돌아가게 된다면 ViewResolver가 호춮.
        - ViewResolver는 로그인 페이지를 html로 만들어 사용자에게 응답.
    - 회원가입 후, 바로 로그인을 실행한다면 세션에 user 정보가 등록되도록 만들면 된다.


- 이번에는 송금 요청의 경우

1. A가 B에게 500만원을 송금하는 요청.

2. controller는 A, B의 유저 정보, 500만원을 송금했다는 정보를 가지고 service에 넘김.

3. service는 
    - JPA repository에 A의 정보를 update 요청(-500만원)
    - JPA repository에 B의 정보를 update 요청(+500만원)

4. JPA repository
    - A라는 정보가 영속성 컨텍스트에 있는지 확인.(만약, 존재한다면 영속성 컨텍스트의 A 오브젝트를 update하고 JPA repository에 응답.)
        - 없을 경우 DB에 update를 요청.
    - B라는 정보가 영속성 컨텍스트에 있는지 확인.

5. 응답받는 과정을 반복하여 service가 끝나면 @Transactional이 종료되며 A와 B의 정보를 DB에 flash하여 commit.

6. 만약, A의 update는 성공했지만, B의 update는 실패했을 경우
    service에서 rollback 처리(코드를 작성)