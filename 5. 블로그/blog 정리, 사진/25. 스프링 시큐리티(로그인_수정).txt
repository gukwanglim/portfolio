1. 이전 스프링 시큐리티(로그인) 편에서 참고 유튜브에서 알려주는 방식과 현재 사용하고 있는 spring의 버전이 달라 문제가 발생하는 부분이있었다.
    한 부분만 수정하면 될 줄 알았는데 생각보다 여러 부분을 수정해야하는 바람이 따로 작성.

    중요한 것은 코드 하나하나에 대한 설명을 하지 못한다는 사실.

    물론, 코드를 수정하여도 문제를 해결할 수 있을지는 미지수이다.
    일단, 수정을 한 다음에 무엇인가 고민이라도 해보자.

2. 우선, 유튜브에 올라와 있는 내용에 없는 부분은 jwt(패키지로 구성, JwtAuthenticationFilter, JwtAuthorizationFilter, JwtProperties), BCrypt 암호화 문제로 인한 해결 부분이 존재한다.
    (유튜브 강사 깃허브 https://github.com/codingspecialist)

3. 현재 하고 싶은 것은 해시화된 비밀번호를 사용하여 로그인을 하는 것이므로 일단 회원가입을 했을 때, password가 해시로 저장되는 상황으로 되돌릴 필요가 있다고 판단.

    3-1. 사진 1번: loginForm.jsp 에서 action="/auth/loginProc" method="post" 부분 지우기.
    3-2. 사진 2번: SecurityConfig.java에서 .loginProcessingUrl("/auth/loginProc"), .defaultSuccessUrl("/"); 부분 주석처리.
    3-3. 사진 3번: PrincipalDetail.java 전부 주석처리.
    3-4. 사진 4번: PrincipalDetailsService.java 전부 주석처리.
    3-5. 사진 5번: UserApiController.java의 @AuthenticationPrincipal PrincipalDetail principal 부분 삭제.

4. 위 과정을 거쳐도 bean을 생성하지 못하는 오류를 바로잡지 못해 이전 버전으로 돌아감.(깃허브에 올려 놓은 가장 최근 버전이 20. 스프링 시큐리티(test)부분)
    (해시 과정까지 마치고 깃허브에 업로드.)
    (해시부터 다시 코드를 작성하면서 오류의 이유가 SecurityConfig.java에서 public BCryptPasswordEncoder encodePWD()를 사용하지 않았기 때문이라는 사실을 알게됨.)
        실제 오류문이 
            Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: 
            Error creating bean with name 'userApiController': Unsatisfied dependency expressed through field 'userService'; 
            nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userService': Unsatisfied dependency expressed through field 'encoder'; 
            nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder' available: expected at least 1 bean which qualifies as autowire candidate. 
            Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
            와 같이 나옴.(bean 생성에 필요한 데이터가 없어서 뜬 오류.)

            오류 문구 중에서 'org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'라는 말이 있어 encode 문제라는 사실을 어렴풋이 알긴 했지만 경험이 부족하여 찾아가지 못했음.

5. - 스프링 시큐리티(로그인)에서 1번 과정을 진행.

    이곳의 전체 코드의 동작에 대해 설명하자면 
        - 인증이 되지 않는 어떠한 요청은 전부 .loginPage("/auth/loginForm")로 인해 /auth/loginForm으로 이동한다.
            (여기서 인증이 필요한 요청 = .antMatchers("/", "/auth/**", "/js/**", "/css/**", "/image/**") 부분)
        - 로그인을 수행하게 되면 .loginProcessingUrl("/auth/loginProc")으로 인해 /auth/loginProc으로 오는 요청을 스프링 시큐리티가 가로채서 대신 로그인한다.
        - 마지막으로 로그인이 완료되면 .defaultSuccessUrl("/");을 통해 / 페이지로 이동한다.
        - 추가로 .failureUrl("/fail");를 사용하게 되면 로그인이 실패했을 경우 /fail으로 이동한다.

    - 스프링 시큐리티(로그인)에서 2번 과정을 진행.
        - PrincipalDetail.java 작성.

    - 스프링 시큐리티(로그인)에서 4번 과정을 진행.(3번 과정을 건너뜀.(spring 2.7 버전부터 WebSecurityConfiguerAdapter deprecate은 지원하지 않고 @Bean SecurityFilterChain을 사용하면 해결됨.))
        - UserRepositroy.java에서 findByUsername()를 선언.
        - PrincipalDetailsService.java 작성.

6. 위 과정을 실행하고 로그인을 시도하면 사진 6번과 같이 404 에러가 뜨는 것을 볼 수 있다.
    이것은 로그인 버튼을 누르고 이동하는 페이지의 주소가 잘못된 것으로 예측된다.

    spring boot app을 종료했다가 다시 시도해보니 코드의 수정없이 로그인에 성공했다.(여러 번 시도를 하여 서버가 꼬였던 것 같다.)

7. 사진 7번을 보면 해시 처리된 password를 가지고 로그인을 하여도 네비게이션바에 글쓰기, 회원정보, 로그아웃이 떠 있는 것을 볼 수 있다.

8. 여기서 로그아웃을 클릭하면 시큐리티에 의해 자동으로 logout까지 구현된 것을 확인할 수 있다.(사진 8번)
    (스프링 시큐리티에서는 /logout이 로그아웃 될 수 있도록 디폴트 값으로 들어가 있다.)

9. 여기서 확일할 때는 header.jsp의 <sec:authorize access="isAuthenticated()">에 있는 isAuthenticated()에 접근하여 principal을 들고오면 스프링 시큐리티가 들고 있는 세션 정보에 접근이 가능하다.(사진 9번)
    이 방식은 jsp에서 확인하는 것이고,

    spring의 console창에서는 public String index(@AuthenticationPrincipal PrincipalDetail principal)를 사용하면 id를 받아올 수 있다.(사진 10, 11번)