1. @Autowired는 DI이며 auth, controller, api 등등의 많은 패키지에서 다른 패키지의 내용을 사용하기 위해 사용된다.
    즉, 프로젝트가 커질수록 @Autowired도 많이 사용된다는 뜻이다.

    이런 @Autowired의 원리에 대해서 설명하자면(예시는 사진 1번과 같이 BoardService.java로 한다.)
        원래 DI의 인덱션은 
            클래스에는 기본적인 생성자가 만들어져야 한다.(기본 생성자는 public BoardService() {}의 형태로 생성되는데 프로젝트의 코드에서는 찾아볼 수 없다.)
            
            spring이 컨포넌트 스캔을 할 때, 어노테이션(@Service)을 읽고 나서 BoardService는 spring 컨텍스트에 저장해야 하는 오브젝트라고 인식하게 된다.
            그래서 BoardService를 new로 하여 저장을 하게 된다.(이때, 기본 생성자를 적용하여 들고 간다.)
                (기본 생성자는 파라미터가 존재하는 생성자를 만드는 즉시 사라지게 된다.)


    1-1. repositroy
        현재 프로젝트의 repositroy 패키지 안에 BoardRepositroy, ReplyRepositroy, UserRepositroy 가 존재한다.(사진 2번)
        spirng이 시작될 때, 컨포넌트 스캔을 하여 spring IoC 컨테이너에 빈 등록을 하게 된다.(빈(bean)은 오브젝트 객체라는 뜻이다.)
            (new BoardRepositroy, new ReplyRepositroy, new UserRepositroy로 등록)
            이때, new 하는 방법이 생성자를 호출하여 하는 것이다.

        기본 생성자가 아닌 파라미터를 가지고 있는 생성자(public BoardService(BoardRepositroy bRepo, ReplyRepositroy rRepo) {})가 존재한다면 파라미터를 넣어야지만 new가 완성된다는 말이다.

    1-2. service
        repositroy를 모두 스캔하여 빈 등록을 완료하게 되면 service로 넘어와 BoardService, UserService를 스캔하게 된다.
        스캔을 진행하기 위해 new를 만들어야 하는데 이미 존재하고 있는 repositroy 빈들은 모두 BoardRepositroy bRepo, ReplyRepositroy rRepo 파라미터를 가지고 있는 상황이다.
        이때는 이미 IoC에 BoardRepositroy와 ReplyRepositroy가 존재하기 때문에 이것을 가지고 service에 대입하여 빈 등록을 실행하게 된다.

    1-3. @Autowired
        따라서 @Autowired를 사용하지 않고 IoC에 빈 등록을 하기 위해서는 사진 3번과 같이 작성하면 된다.

        즉, 이러한 과정을 거치는 것은 번거롭기 때문에 @Autowired를 사용하는 것이다.

    1-4. 다른 방법
        물론, @Autowired를 사용하는 것보다 훨씬 쉬운 방법이 있다.
        그것은 final을 사용하는 것으로 사진 4번처럼 public 뒤에 넣어 사용하는데 final을 사용하에 되면 무슨 값이든 초기화가 되어야 한다.(사진 5번)

        이때, null을 사용하지 않고 @RequiredArgsConstructor 어노테이션을 사용하게 되면 초기화 되지 않은 생성자를 호출할 때, 초기화를 진행해준다.(사진 6번)

        이렇게 사용하면 @Autowired을 사용하지 않아도 문제가 없기 때문에 코드가 깔끔해진다.

    즉, this., @Autowired, @RequiredArgsConstructor 세 가지 방식 모두 같은 결과를 가져온다.