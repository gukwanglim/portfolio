1. BoardController.java에서 @AuthenticationPrincipal PrincipalDetail principal 부분 삭제.(사진 1번)
    BoardController.java의 @Controller 어노테이션 안에 @GetMapping을 이용하여 board/saveForm 연결(사진 2번)
        (header.jsp에서 글쓰기와 회원정보에 경로를 헷갈리지 않도록 수정.(사진 3번))

2. src/main/webapp/WEB-INF/views 폴어 안에 board 폴더를 생성하여 saveForm.jsp 생성.(사진 4번)
    saveForm.jsp가 제대로 연결되어 있는지 확인.(사진 5번)
    (이때 경로 설정의 주의해야한다.)

    경로 설정에 문제가 없다면 사진 6번과 같이 http://localhost:8000/board/saveForm이 뜨는 것을 확인.

    현재의 주소는 SecurityConfig.java에서 인증이 되어야만 들어갈 수 있도록 되어있다.
        (이전에 설명이 되어 있었지만 다시 설명하자면 사진 7번과 같이 "/", "/auth/**", "/js/**", "/css/**", "/image/**"를 제외한 주소는 인증이 되어있지 않으면 들어갈 수 없다.)

3. 사진 8번과 같이 saveForm.jsp에 기본틀을 작성해주고 들어가보면 사진 9번 모습과 같이 되어있는 것을 확인할 수 있다.
    이 페이지를 꾸미기 위해 w3의 bootstrap4 - BS4 Inputs에서 Bootstrap Textarea를 사용한다.(사진 10번)
    다시 페이지에 들어가보면 사진 11번과 같이 변한 모습을 볼 수 있다.

4. summer note 홈페이지에 들어가 Getting started - Installation - For Bootstrap 4 에 들어가면(사진 12번) 사진 13번과 같이 코드를 확인할 수 있다.
    여기에 존재하는 summernote link와 script를 header.jsp에 작성.(사진 14번)

    아래 script 부분을 복사하여 saveForm.jsp의 아래에 작성.(사진 15번)
        (여기서 가져온 script 부분은 summernote라는 이름을 가지고 있어야 하므로 content의 class에 summernote를 추가한 후, #이 아닌 .(id가 아닌 class 값)으로 변경.(사진 16번))
        그 외 나머지 부분은 적당히 수정(ui 부분)
    
    이렇게하면 사진 17번과 같이 http://localhost:8000/board/saveForm가 변경된 것을 확인할 수 있음.

5. 여기서 "글쓰기" 버튼은 json으로 요청하기 위해 form 밖으로 빼서 사용.(사진 18번)
    버튼을 연동하기 위해 board.js 파일을 생성(사진 19번, board.js는 user.js를 그대로 복사, btn-save를 그대로 사용하기 위함)
    사진 20번과 같이 src="/js/board.js" 경로 작성

6. saveForm.jsp에서 title과 content를 뽑아오기 위해서 board.js에서 let data로 title, content를 받아오고, ajax의 타입은 post(글쓰기 요청이므로 post 요청), 경로 수정.(사진 21번)

7. board.js에서의 경로가 /api/board이므로 api 패키지에 BoardApiController 클래스를 생성하여 사진 22번과 같이 /api/board가 매핑되도록 작성.(Board table을 사용해야함.)

8. board.js가 만들어 졌으므로 repositroy 패키지에 BoardRepositroy 클래스를 생성.(사진 23번)
    BoardRepositroy.java는 사진 24번과 같이 Board table을 사용.

9. 이번에는 sevice 패키지에 BoardService 클래스를 생성.(사진 25번) 
    BoardRepositroy와 연결. 글쓰기 메소드는 board.js에서 title, content 정보를 가져오고 Board table에 count 정보를 직접 입력해준다.(사진 26번, 코드에서 conut라고 오타가 났지만 그냥 이 상태로 사용)
        (여기서 중요한 것은 글쓰기를 하기 위해서는 Board와 User의 정보가 모두 필요하다는 것이다.)

    여기에 글쓰기를 하기 위해서는 user의 정보가 필요하다.(사진 30번)
    그런데 Board에는 user의 정보가 없기 때문에 UserRepositroy.java에 들어가서 이곳에 존재하는 user의 정보를 BoardService.java로 넘겨줄 예정.

    BoardApiController.java에서 @Autowired를 사용하여 BoardService를 연동시키고 boardService.글쓰기(board);와 같이 사용하는데 board만 넘겨주는 것이 아닌 @AuthenticationPrincipal PrincipalDetail principal도 함께 사용.
        (@AuthenticationPrincipal PrincipalDetail principal를 사용하는 이유는 PrincipalDetail이 들고 있는 User 오브젝트가 필요한데 이런 방식으로 가져오기 위해서는 사진 27번과 같이 PrincipalDetail.java에서 @Getter를 사용.)

10. 위 과정을 모두 거치면
    - 로그인을 하게 되면 board/saveForm에 들어갈 수 있게 된다.
    - saveForm에서는 title, content를 작성하고 글쓰기 버튼을 누르면 <script src="/js/board.js"></script>가 작동하여 board.js 안의 코드가 돌아간다.
        (board.js 안의 코드가 버튼을 눌렀을 때 title, content를 가져와서 json 파일로 날린다.(이때 날아가는 주소가 /api/board))
    - title, content 정보를 가지고 BoardApiController.java로 이동하여 글쓰기() 메소드가 작동하는데 글을 쓰기 위해서는 user의 정보도 필요하여 principal을 이용하여 들고온다.
    - 글쓰기를 하게 되면 BoardService.java로 가서 title, content, count, user의 정보를 이용하여 save()를 하게 되면 board table에 저장이 된다.
    - 저장이 끝나면 다시 BoardApiController.java로 돌아와서 정상적으로 작동했다는 return을 넘겨준다.
    - 응답을 받게 되면 board.js에서 정상적으로 글쓰기를 완료했다는 alert를 받을 수 있게 된다.

    실제로 로그인을 한 상태에서 글쓰기를 진행하면 사진 31번과 같이 415 에러가 발생했다.
        중요한 것은 timestamp에서 에러가 발생했다는 것이다.
            간단하게 말해 import java.security.Timestamp;는 해당 어노테이션을 지원하지 않는다는 말이다.(board table은 user table과 달리 java.security.Timestamp가 사용되고 있었다.)
            
            해결 방법은 import java.sql.Timestamp;로 사용하는 것이다.

        문제를 해결하면 사진 32번과 같이 작성이 완료됐다는 alert가 나오고, 사진 33번과 같이 DB에 저장되는 것을 확인할 수 있다.