1. 시큐리티는 로그인 요청을 받으면 전송되는 파라메터 중, username과 password를 가로채서 로그인을 진행한다.
    (이때 password 정보는 해쉬처리가 되어야만 받아준다.)
    이후 로그인이 완료가 되면 시큐리티의 전용 세션으로 유저의 정보를 등록한다.(IoC, 이 유저 정보는 필요할 때마다 가져와서 사용(DI))

    그런데 시큐리티 세션에는 정해진 type만을 저장할 수 있다.(UserDetails)(우리가 만든 것은 User 오브젝트)
        (이런 경우에는 User 오브젝트가 UserDetails를 extends하면 사용할 수 있다.)

2. 사진 1번과 같이 SecurityConfig.java에서 public BCryptPasswordEncoder encodePWD()를 선언.
    encodePWD() 함수만 호출하면 new BCryptPasswordEncoder()를 return 받을 수 있게 됨.
    여기서 @Bean을 사용하면 IoC가 된다.(함수가 return 하는 값을 spring이 관리.)

3. UserApiController.java에서 user.setRole(RoleType.USER);를 UserService.java로 이동시킨다.(사진 2번, 코드 작성의 편의를 위해서)
    UserService.java에서 private BCryptPasswordEncoder encode;를 @Autowired로 작성하고 원문(1234)을 String rawPassword에 받아 이것을 해쉬로 변경하여 String encPassword에 담는다.
    이렇게 해쉬가 담긴 String encPassword는 user.setPassword()으로 데이터 베이스에 작성한다.
    
4. 이제 회원가입을 진행하면(사진 4번) 데이터 베이스에 기존과 달리 해시화 된 password를 확인할 수 있다.(사진 5번)