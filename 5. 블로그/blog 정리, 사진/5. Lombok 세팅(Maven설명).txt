1. marven이란?
    만약, 데이터 베이스를 사용하는데 blog라는 프로젝트 안에서 사용하게 된다면 blog 프로젝트 내부에 lib 파일을 생성하여 데이터 베이스를 copy하여 사용하게 된다.
    마찬가지로 instar라는 프로젝트 내부에도 lib 파일을 생성하여 데이터 베이스를 사용하게 된다.
    이렇게 된다면 데이터 베이스는 두 번의 copy를 거쳐서 사용하게 되는 것이다.

    하지만, 프로젝트 외부에서 lib 파일을 생성하고 데이터 베이스를 copy한다면 하나의 파일을 가지고 두 프로젝트에서 데이터 베이스를 사용할 수 있게 된다.
    물론, 이렇게 사용하게 된다면 프로젝트를 배포하게 될 경우, lib를 새로 만들어 연결해야 한다는 단점이 생긴다.
    또한, 이렇게 사용하기 위한 데이터 베이스는 각각의 데이터 베이스 사이트에서 다운을 받아 사용해야한다.(오라클, gson 등등)

    이러한 문제를 해결하기 위해서 중앙 저장소(여러 데이터 베이스의 집합이라 생각하면 편하다.)를 따로 만들고, 프로젝트를 실행할 때, pom.xml에 기술되어 있는 데이터 베이스를 Marven(프로젝트 관리 도구)이 읽는다.
    이렇게 marven이 필요한 데이터 베이스(pom.xml에 기술된 데이터 베이스)를 읽고 중앙 저장소에서 자동으로 다운을 받게 된다.
    다운 받은 파일들은 .m2 라는 폴더 내부의 repository라는 폴더에 들어간다. 이렇게 다운받은 파일들은 자동으로 빌드가 된다.
    이 방식을 사용하게 되면 프로젝트를 배포 받는다 하여도 프로젝트를 시작하는데 필요한 사이트에 들어가 일일히 다운받지 않아도 된다.(물론, maven은 설치되어 있어야 한다.)

    .m2 폴더의 위치는 C:\Users\user\.m2에서 확인할 수 있다.
    실제로 .m2 폴더에 들어가보면 repository 폴더가 존재하며 그 안에는 1. 의존성 설정에서 pom.xml에 작성했던 라이브러리들이 다운받아져 있는 것을 확인할 수 있다.(사진 1번)

2. Lombok
    C:\Users\user\.m2\repository에서 Lombok이 저장되어 있는 org.projectlombok.lombok을 보면 버전별로 저장되어 있으며 lombok-1.18.24.jar 와 같이 java 파일이 있다.(사진 2번)
    이 파일을 열어 확인하기 위해서는 파일이 존재하는 위치에서 우클릭 - Git Bash Here(사진 3번)로 git bash 실행.
    $ java -jar lombok-1.18.24.jar를 실행(사진 4번)하면 사진 5번이 뜨는 것을 확인할 수 있다.
    여기서 Specify location에 들어가 STS4를 찾아 선택한다.(사진 6번) 그러면 사진 7번과 같이 인스톨을 할 수 있게 된다.(사진 8번) (위 과정은 cmd에서도 가능하다.)

    설치가 끝나고 다시 STS4를 실행하여 Member.java의 생성자, 메소드를 지우고 @Data 어노테이션을 추가한다.(사진 9번)(@Data는 @Getter와 @Setter를 동시에 사용하는 것이다.)
    (모든 필드를 사용하는 생성자를 만들고 싶다면 @AllArgsConstructor를 사용한다. 또한, 빈 생성자를 만들고 싶다면 @NoArgsConstructor를 사용한다.
    하지만, 요즘은 @AllArgsConstructor를 사용하지 않고 데이터 베이스의 값을 들고와 적용시키는 것이기 때문에 데이터가 변경되지 않도록 final을 사용(사진 10번)
    물론, 데이터의 변경이 필요할 경우 final을 사용하면 안되지만 @RequiredArgsConstructor를 사용하면 final이 붙은 변수에 대한 constructor를 만들어 변경이 가능하게 만들어준다.)

    이번 실습에서는 간단하게 @Data, @AllArgsConstructor, @NoArgsConstructor를 사용한다.(사진 11번)
    이렇게하면 getId(), getUsername()와 같은 메소드를 만들지 않아도 에러가 뜨지 않는 것을 확인할 수 있다.(사진 12번)
    코드가 제대로 작동하는지 확인하기 위해 내용을 추가(사진 13번)
    사진 13번에서 Member m = new Member(1, "kwang", 1234, "email");와 같이 불러올 수 있는 이유는 @AllArgsConstructor로 인해 모든 생성자가 만들어졌다는 의미이다.
    (@NoArgsConstructor의 경우는 Member m1 = new Member()를 사용할 수 있게 해준다.)

    spring boot app을 실행하면 사진 14번과 같이 브라우저에 출력되고 Console창에 getter와 setter가 출력되는 것을 확인할 수 있다.

    이번에는 Member.java에서 @AllArgsConstructor를 지우고 다시 생성자를 만든 후,(이 상태에서도 정상적으로 작동한다.) @Builder를 사용한다.(사진 15번)
    
    @Builder를 쓰는 이유를 간단히 설명하자면
        사실 Member m = new Member(1, "kwang", 1234, "email");에서 id 값은 직접 넣어주지 않아도 자동으로 증가하는 값이다. 그렇다면 id를 굳이 적을 필요가 없게되고,
        id를 기입하지 않은 상태에서 에러가 발생하지 않게 만들기 위해서는 id값을 포함하지 않도록 overloding이 되어야한다.(public Member(String username, int password, String email))
        이러한 불편함을 없애기 위해서 @Builder를 사용한다.

    @Builder의 사용법은 Mapping 어노테이션에서 사진 16번과 같이 Member m = Member.builder().username("kwang").email("kwang@naver.com").build();으로 
    new를 지우고 .builder()와 .build() 사이에 기입하고 싶은 내용만 넣는다.(기입 내용 순서 무관)(사진 17번)