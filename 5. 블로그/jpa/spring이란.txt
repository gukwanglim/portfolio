1. 스프링이란?
    1-1. 스프링은 프레임워크이다.
    1-2. 스프링은 오픈소스이다.
    1-3. 스프링은 IoC 컨테이너를 가진다.
    1-4. 스프링은 DI 를 지원한다.
    1-5. 스프링은 엄청나게 많은 필터를 가지고 있다.
    1-6. 스프링은 엄청나게 많은 어노테이션을 가지고 있다. (리플렉션, 컴파일체킹)
    1-7. 스프링은 MessageConverter를 가지고 있다. 기본값은 현재 Json이다.
    1-8. 스프링은 BufferedReader와 BufferedWriter를 쉽게 사용할 수 있다.
    1-9. 스프링은 계속 발전중이다.

    1-1. 프레임워크란 풀어서 설명하자면 틀 안에서 동작한다는 뜻이다.
     이와  비슷한 개념인 라이브러리가 있는데 라이브러리는 프레임워크보다 더욱 자유롭게 사용이 가능하다.

    1-2. 오픈소스는 말 그대로 소스를 공개한다는 뜻이다. 즉, 코드의 내부를 공개하고 다른 사람들이 사용하게 될 경, 그것을 고쳐서 사용할 수 있다는 말이다.

    1-3. IoC(Inversion Of Controll, 제어의 역전(주도권은 스프링에 있다.))는 스프링의 핵심이다.
     class는 설계도, object는 실체화가 가능한 것(abstact class는 추상적인 class이므로 실체화가 가능한 object가 올 수 없다.), instance는 실체화 된 것을 의미한다.
     (예를 들자면 '가구'는 추상적인 것이다.(실체화 불가능) 실체화가 가능한 것(object)은 '가구'라는 카테고리에 존재하는 '의자', '책상' 등이 된다. 이렇게 존재하다가 실제 우리 집에 '의자', '책상'을
      설치하게 된다면 그제야 실체화(instance)가 되었다고 말할 수 있다.) 

    IoC는 스프링이 주도권을 갖게 되는 것이라고 말했다.
    반대로 사용자가 주도권을 갖는다는 말은 object를 new를 사용하여 heap이라는 메모리 공간에 올리는 것을 말한다.
    즉, 의자 s = new 의자(); 라는 코드를 만들었을 때, heap 안에 '의자'라는 이름이 들어간 주소 's'가 담기게 된다.
     이 's'는 new를 만든 메서드에서 관리한다.

     코드를 가지고 예를 들자면 public void make() { 의자 s = new 의자() }를 한다면 make()라는 메소드에서 heap에 저장된 주소('s')를 관리하며,
     새로운 메소드 public void use() 가 만들어지고 똑같이 { 의자 s = new 의자() }를 적성한다 하여도 use() 메소드에서 's'를 호출하여도 make()에서 만든 's'를 불러올 수 없다.
     만약, use()에서 make()의 's'를 넘겨받고 싶다면 코드가 복잡해질 것이다.

    이 문제를 해결하기 위해서 스프링은 IoC를 제공한다.
     IoC는 class로 만들어 놓은 object를 스캔하여 heap 메모리에 자동으로 저장하는 것이다. 즉, 다른 메소드에 저장된 값을 가져오기 위해 필요한 복잡한 코드를 자동으로 만들어 준다고 생각하면 편하다.

    1-4. DI(Dependency Injection)는 개발자가 new를 사용하여 객체의 주소를 원하는 곳에서 관리했는데 IoC로 인해 스프링이 관리하게 되었기 때문에 내가 원하는 class의 메소드에 가져가 사용하는 것을 말한다.   

    1-5. 스프링은 기본적으로 필터 기능을 가지고 있다.(모든 필터(권한 체크)가 다 사용되는 것이 아니지만, 사용하지 않는 필터를 사용할 수 있도록 설정할 수 있고, 직접 필터를 생성해서 사용할 수 있다.)
     톰켄을 거쳐 스프링 컨테이너에 들어가게 되는데 톰켄이 가지고 있는 필터는 필터(filter)라고 부르며 이때, 필터 안에 있는 파일을 web.xml이라고 부른다.
     톰켄의 필터를 거쳐 스프링 컨테이너로 들어가는데 스프링 자체가 필터를 들고 있기 때문에 이것을 당연히 거쳐야한다. 이때, 스프링 필터를 인터셉터(Interceptor)라고 부른다.(인터셉터에는 AOP라는 기능이 있지만, 설명은 이후에 자세히)

    1-6. 주석(java의 경우 '//')은 컴파일러가 무시하는 부분이다. 하지만, 어노테이션(Annotation)은 컴파일러가 무시하지 않는다.(어노테이션은 '주석+힌트')
     사용 방법의 예시
          Animal class에 run() 이라는 메소드가 있고, Dog class가 Animal을 상속받고 run() 메소드를 재정의(overriding)할 때, @override 와 같이 어노테이션을 붙인다.
          이렇게 하면 나중에 java가 실행될 때, 해당 파일을 컴파일하게되면 Animal이라는 class가 run()이라는 메소드를 가지고 있다는 사실을 확인한다.(만약, 부모 클래스에 overriding 되는 메소드가 없을 경우 에러 발생)

      스프링에서는 어노테이션을 사용하여 객체를 생성한다.
          만약, @Component라는 어노테이션은 '클래스 메모리에 로딩'을 수행하고, @Autowired라는 어노테이션에는 '코딩된 객체를 해당 변수 안에 집어 넣기'라는 약속이 되어 있다면 
          @Component가 사용된 class A(예시)에 IoC가 적용되어 class A를 스캔하여 heap 메모리에 저장한다.(객체 생성)
          이것을 class B에서 사용하게 된다면, @Aoutwired A a;로 불러올 수 있다(어노테이션을 사용하지 않으면 A a = new A()로 인스턴스를 만들어야한다.)

          이런 식으로 스프링이 B class를 스캔(읽어드릴 때)할 때, 클래스 내부에 어떤 내용이 있는지 분석하는 기법을 리플렉션(reflection)이라 하고, 리플렉션을 통해 특정 메소드, 필드, 어노테이션이 있는지 체크하고 그것들을 설정할 수 있다.
          만약, 스프링이 리플렉션을 할 때, class B에서 읽어들인 @Component가 class A에 없을 경우, none으로 처리한다.(존재할 경우에는 타입을 통해서 찾는다.)

          정리하자면 리플렉션은 분석하는 기법이라 할 수 있는데 이것은 런타임 분석 시에 작동한다.

    1-7. MessageConverter를 약간의 예시를 들어 설명하자면
          java 프로그램과 python 프로그램이 서로 의미 전달이 되기 위해서 중간 데이터(xml이 사용되지만 현재는 json을 더 많이 사용)를 사용하여 소통이 가능하게 만드는 것이다.
          json은 {"num":10, "name":사자}와 같은 형태로 생겼으며, java를 json으로 바꾸는 것도, python을 json으로 바꾸는 것도 편하다.
          이렇게 서로 다른 데이터를 전송할 때, 중간에서 중간 데이터로 변환하는 것을 MessageConverter라고 한다.
          MessageConverter는 기본적으로 jackson(json으로 변경해주는 라이브러리)으로 설정되어 있다.(요청(request), 응답(response)에 모두 사용)

    1-8. BufferedReader와 BufferedWriter
      java에서는 데이터를 송신받을 때, Byte Stream(1byte()8bit)로 전송받는다. 이것을 InputStream이라 한다. 하지만 이것은 문자를 읽는 단위가 byte이다. 이것은 사람들이 읽기에는 편의성이 없다. 이것을 읽기 위해서는 받은 데이터를 char로 캐스팅을 해야한다.
      이러한 방식이 복잡하기 때문에 새로운 class인 InputStreamReader로 감싸면 byte를 문자로 감싸서 문자 하나를 넘기게 된다. 이렇게 넘기는 것은 배열의 형태로 여러 문자를 넘길 수 있게 되는데,
      배열의 문제는 크기가 정해져 있어야 한다는 사실이다.(크기가 정해져있기 때문에 이 크기를 넘어가는 문자를 보낼 경우 잘린 상태로 전송이 된다.)
      
      이런 문제를 해결하기 위해서 BufferedReader로 문자를 감싸게 된다. 이렇게 하면 가변 길이의 문자를 받을 수 있다.
        JSP에서는 request.getReader를 사용하면 BufferedReader가 적용되고(데이터를 요청받았을 경우),  
        반대로 응답의 경우에는 BufferedWriter를 사용해야하지만 여기에는 내려쓰기 기능이 없어서 java에서는 printwriter를 사용하는데 여기서는 print()와 println()이라는 함수를 제공해준다.(JSP에서는 내장 기능인 out을 사용하면 BufferedWriter를 적용)

      스프링에서 사용하기 위해서는 @ResponseBody (-> BufferedReader 사용) @RequestBody (-> BufferedWriter 사용) 를 이용한다.